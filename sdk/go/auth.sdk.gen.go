// Code generated by protoc-gen-go-flipt-sdk. DO NOT EDIT.

package sdk

import (
	context "context"
	auth "go.flipt.io/flipt/rpc/flipt/auth"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

type AuthClient interface {
	PublicAuthenticationServiceClient() auth.PublicAuthenticationServiceClient
	AuthenticationServiceClient() auth.AuthenticationServiceClient
	AuthenticationMethodTokenServiceClient() auth.AuthenticationMethodTokenServiceClient
	AuthenticationMethodOIDCServiceClient() auth.AuthenticationMethodOIDCServiceClient
	AuthenticationMethodKubernetesServiceClient() auth.AuthenticationMethodKubernetesServiceClient
}

type Auth struct {
	transport     AuthClient
	tokenProvider ClientTokenProvider
}

type PublicAuthenticationService struct {
	transport     auth.PublicAuthenticationServiceClient
	tokenProvider ClientTokenProvider
}

func (s Auth) PublicAuthenticationService() *PublicAuthenticationService {
	return &PublicAuthenticationService{
		transport:     s.transport.PublicAuthenticationServiceClient(),
		tokenProvider: s.tokenProvider,
	}
}
func (x *PublicAuthenticationService) ListAuthenticationMethods(ctx context.Context) (*auth.ListAuthenticationMethodsResponse, error) {
	ctx, err := authenticate(ctx, x.tokenProvider)
	if err != nil {
		return nil, err
	}
	return x.transport.ListAuthenticationMethods(ctx, &emptypb.Empty{})
}

type AuthenticationService struct {
	transport     auth.AuthenticationServiceClient
	tokenProvider ClientTokenProvider
}

func (s Auth) AuthenticationService() *AuthenticationService {
	return &AuthenticationService{
		transport:     s.transport.AuthenticationServiceClient(),
		tokenProvider: s.tokenProvider,
	}
}
func (x *AuthenticationService) GetAuthenticationSelf(ctx context.Context) (*auth.Authentication, error) {
	ctx, err := authenticate(ctx, x.tokenProvider)
	if err != nil {
		return nil, err
	}
	return x.transport.GetAuthenticationSelf(ctx, &emptypb.Empty{})
}

func (x *AuthenticationService) GetAuthentication(ctx context.Context, v *auth.GetAuthenticationRequest) (*auth.Authentication, error) {
	ctx, err := authenticate(ctx, x.tokenProvider)
	if err != nil {
		return nil, err
	}
	return x.transport.GetAuthentication(ctx, v)
}

func (x *AuthenticationService) ListAuthentications(ctx context.Context, v *auth.ListAuthenticationsRequest) (*auth.ListAuthenticationsResponse, error) {
	ctx, err := authenticate(ctx, x.tokenProvider)
	if err != nil {
		return nil, err
	}
	return x.transport.ListAuthentications(ctx, v)
}

func (x *AuthenticationService) DeleteAuthentication(ctx context.Context, v *auth.DeleteAuthenticationRequest) error {
	ctx, err := authenticate(ctx, x.tokenProvider)
	if err != nil {
		return err
	}
	_, err = x.transport.DeleteAuthentication(ctx, v)
	return err
}

func (x *AuthenticationService) ExpireAuthenticationSelf(ctx context.Context, v *auth.ExpireAuthenticationSelfRequest) error {
	ctx, err := authenticate(ctx, x.tokenProvider)
	if err != nil {
		return err
	}
	_, err = x.transport.ExpireAuthenticationSelf(ctx, v)
	return err
}

type AuthenticationMethodTokenService struct {
	transport     auth.AuthenticationMethodTokenServiceClient
	tokenProvider ClientTokenProvider
}

func (s Auth) AuthenticationMethodTokenService() *AuthenticationMethodTokenService {
	return &AuthenticationMethodTokenService{
		transport:     s.transport.AuthenticationMethodTokenServiceClient(),
		tokenProvider: s.tokenProvider,
	}
}
func (x *AuthenticationMethodTokenService) CreateToken(ctx context.Context, v *auth.CreateTokenRequest) (*auth.CreateTokenResponse, error) {
	ctx, err := authenticate(ctx, x.tokenProvider)
	if err != nil {
		return nil, err
	}
	return x.transport.CreateToken(ctx, v)
}

type AuthenticationMethodOIDCService struct {
	transport     auth.AuthenticationMethodOIDCServiceClient
	tokenProvider ClientTokenProvider
}

func (s Auth) AuthenticationMethodOIDCService() *AuthenticationMethodOIDCService {
	return &AuthenticationMethodOIDCService{
		transport:     s.transport.AuthenticationMethodOIDCServiceClient(),
		tokenProvider: s.tokenProvider,
	}
}
func (x *AuthenticationMethodOIDCService) AuthorizeURL(ctx context.Context, v *auth.AuthorizeURLRequest) (*auth.AuthorizeURLResponse, error) {
	ctx, err := authenticate(ctx, x.tokenProvider)
	if err != nil {
		return nil, err
	}
	return x.transport.AuthorizeURL(ctx, v)
}

func (x *AuthenticationMethodOIDCService) Callback(ctx context.Context, v *auth.CallbackRequest) (*auth.CallbackResponse, error) {
	ctx, err := authenticate(ctx, x.tokenProvider)
	if err != nil {
		return nil, err
	}
	return x.transport.Callback(ctx, v)
}

type AuthenticationMethodKubernetesService struct {
	transport     auth.AuthenticationMethodKubernetesServiceClient
	tokenProvider ClientTokenProvider
}

func (s Auth) AuthenticationMethodKubernetesService() *AuthenticationMethodKubernetesService {
	return &AuthenticationMethodKubernetesService{
		transport:     s.transport.AuthenticationMethodKubernetesServiceClient(),
		tokenProvider: s.tokenProvider,
	}
}
func (x *AuthenticationMethodKubernetesService) VerifyServiceAccount(ctx context.Context, v *auth.VerifyServiceAccountRequest) (*auth.VerifyServiceAccountResponse, error) {
	ctx, err := authenticate(ctx, x.tokenProvider)
	if err != nil {
		return nil, err
	}
	return x.transport.VerifyServiceAccount(ctx, v)
}
