// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package environments

import (
	"context"
	"io"

	mock "github.com/stretchr/testify/mock"
	"go.flipt.io/flipt/internal/storage"
	"go.flipt.io/flipt/rpc/v2/environments"
	"go.flipt.io/flipt/rpc/v2/evaluation"
)

// NewMockEnvironment creates a new instance of MockEnvironment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEnvironment(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEnvironment {
	mock := &MockEnvironment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEnvironment is an autogenerated mock type for the Environment type
type MockEnvironment struct {
	mock.Mock
}

type MockEnvironment_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEnvironment) EXPECT() *MockEnvironment_Expecter {
	return &MockEnvironment_Expecter{mock: &_m.Mock}
}

// Branch provides a mock function for the type MockEnvironment
func (_mock *MockEnvironment) Branch(ctx context.Context, branch string) (Environment, error) {
	ret := _mock.Called(ctx, branch)

	if len(ret) == 0 {
		panic("no return value specified for Branch")
	}

	var r0 Environment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (Environment, error)); ok {
		return returnFunc(ctx, branch)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) Environment); ok {
		r0 = returnFunc(ctx, branch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Environment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, branch)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEnvironment_Branch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Branch'
type MockEnvironment_Branch_Call struct {
	*mock.Call
}

// Branch is a helper method to define mock.On call
//   - ctx
//   - branch
func (_e *MockEnvironment_Expecter) Branch(ctx interface{}, branch interface{}) *MockEnvironment_Branch_Call {
	return &MockEnvironment_Branch_Call{Call: _e.mock.On("Branch", ctx, branch)}
}

func (_c *MockEnvironment_Branch_Call) Run(run func(ctx context.Context, branch string)) *MockEnvironment_Branch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockEnvironment_Branch_Call) Return(environment Environment, err error) *MockEnvironment_Branch_Call {
	_c.Call.Return(environment, err)
	return _c
}

func (_c *MockEnvironment_Branch_Call) RunAndReturn(run func(ctx context.Context, branch string) (Environment, error)) *MockEnvironment_Branch_Call {
	_c.Call.Return(run)
	return _c
}

// Configuration provides a mock function for the type MockEnvironment
func (_mock *MockEnvironment) Configuration() *environments.EnvironmentConfiguration {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Configuration")
	}

	var r0 *environments.EnvironmentConfiguration
	if returnFunc, ok := ret.Get(0).(func() *environments.EnvironmentConfiguration); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*environments.EnvironmentConfiguration)
		}
	}
	return r0
}

// MockEnvironment_Configuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Configuration'
type MockEnvironment_Configuration_Call struct {
	*mock.Call
}

// Configuration is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) Configuration() *MockEnvironment_Configuration_Call {
	return &MockEnvironment_Configuration_Call{Call: _e.mock.On("Configuration")}
}

func (_c *MockEnvironment_Configuration_Call) Run(run func()) *MockEnvironment_Configuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_Configuration_Call) Return(environmentConfiguration *environments.EnvironmentConfiguration) *MockEnvironment_Configuration_Call {
	_c.Call.Return(environmentConfiguration)
	return _c
}

func (_c *MockEnvironment_Configuration_Call) RunAndReturn(run func() *environments.EnvironmentConfiguration) *MockEnvironment_Configuration_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNamespace provides a mock function for the type MockEnvironment
func (_mock *MockEnvironment) CreateNamespace(context1 context.Context, rev string, namespace *environments.Namespace) (string, error) {
	ret := _mock.Called(context1, rev, namespace)

	if len(ret) == 0 {
		panic("no return value specified for CreateNamespace")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *environments.Namespace) (string, error)); ok {
		return returnFunc(context1, rev, namespace)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *environments.Namespace) string); ok {
		r0 = returnFunc(context1, rev, namespace)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *environments.Namespace) error); ok {
		r1 = returnFunc(context1, rev, namespace)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEnvironment_CreateNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNamespace'
type MockEnvironment_CreateNamespace_Call struct {
	*mock.Call
}

// CreateNamespace is a helper method to define mock.On call
//   - context1
//   - rev
//   - namespace
func (_e *MockEnvironment_Expecter) CreateNamespace(context1 interface{}, rev interface{}, namespace interface{}) *MockEnvironment_CreateNamespace_Call {
	return &MockEnvironment_CreateNamespace_Call{Call: _e.mock.On("CreateNamespace", context1, rev, namespace)}
}

func (_c *MockEnvironment_CreateNamespace_Call) Run(run func(context1 context.Context, rev string, namespace *environments.Namespace)) *MockEnvironment_CreateNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*environments.Namespace))
	})
	return _c
}

func (_c *MockEnvironment_CreateNamespace_Call) Return(s string, err error) *MockEnvironment_CreateNamespace_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockEnvironment_CreateNamespace_Call) RunAndReturn(run func(context1 context.Context, rev string, namespace *environments.Namespace) (string, error)) *MockEnvironment_CreateNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// Default provides a mock function for the type MockEnvironment
func (_mock *MockEnvironment) Default() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Default")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockEnvironment_Default_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Default'
type MockEnvironment_Default_Call struct {
	*mock.Call
}

// Default is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) Default() *MockEnvironment_Default_Call {
	return &MockEnvironment_Default_Call{Call: _e.mock.On("Default")}
}

func (_c *MockEnvironment_Default_Call) Run(run func()) *MockEnvironment_Default_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_Default_Call) Return(b bool) *MockEnvironment_Default_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockEnvironment_Default_Call) RunAndReturn(run func() bool) *MockEnvironment_Default_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBranch provides a mock function for the type MockEnvironment
func (_mock *MockEnvironment) DeleteBranch(ctx context.Context, branch string) error {
	ret := _mock.Called(ctx, branch)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBranch")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, branch)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEnvironment_DeleteBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBranch'
type MockEnvironment_DeleteBranch_Call struct {
	*mock.Call
}

// DeleteBranch is a helper method to define mock.On call
//   - ctx
//   - branch
func (_e *MockEnvironment_Expecter) DeleteBranch(ctx interface{}, branch interface{}) *MockEnvironment_DeleteBranch_Call {
	return &MockEnvironment_DeleteBranch_Call{Call: _e.mock.On("DeleteBranch", ctx, branch)}
}

func (_c *MockEnvironment_DeleteBranch_Call) Run(run func(ctx context.Context, branch string)) *MockEnvironment_DeleteBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockEnvironment_DeleteBranch_Call) Return(err error) *MockEnvironment_DeleteBranch_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEnvironment_DeleteBranch_Call) RunAndReturn(run func(ctx context.Context, branch string) error) *MockEnvironment_DeleteBranch_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNamespace provides a mock function for the type MockEnvironment
func (_mock *MockEnvironment) DeleteNamespace(context1 context.Context, rev string, key string) (string, error) {
	ret := _mock.Called(context1, rev, key)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNamespace")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return returnFunc(context1, rev, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = returnFunc(context1, rev, key)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(context1, rev, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEnvironment_DeleteNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNamespace'
type MockEnvironment_DeleteNamespace_Call struct {
	*mock.Call
}

// DeleteNamespace is a helper method to define mock.On call
//   - context1
//   - rev
//   - key
func (_e *MockEnvironment_Expecter) DeleteNamespace(context1 interface{}, rev interface{}, key interface{}) *MockEnvironment_DeleteNamespace_Call {
	return &MockEnvironment_DeleteNamespace_Call{Call: _e.mock.On("DeleteNamespace", context1, rev, key)}
}

func (_c *MockEnvironment_DeleteNamespace_Call) Run(run func(context1 context.Context, rev string, key string)) *MockEnvironment_DeleteNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockEnvironment_DeleteNamespace_Call) Return(s string, err error) *MockEnvironment_DeleteNamespace_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockEnvironment_DeleteNamespace_Call) RunAndReturn(run func(context1 context.Context, rev string, key string) (string, error)) *MockEnvironment_DeleteNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// EvaluationNamespaceSnapshot provides a mock function for the type MockEnvironment
func (_mock *MockEnvironment) EvaluationNamespaceSnapshot(context1 context.Context, s string) (*evaluation.EvaluationNamespaceSnapshot, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for EvaluationNamespaceSnapshot")
	}

	var r0 *evaluation.EvaluationNamespaceSnapshot
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*evaluation.EvaluationNamespaceSnapshot, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *evaluation.EvaluationNamespaceSnapshot); ok {
		r0 = returnFunc(context1, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evaluation.EvaluationNamespaceSnapshot)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEnvironment_EvaluationNamespaceSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvaluationNamespaceSnapshot'
type MockEnvironment_EvaluationNamespaceSnapshot_Call struct {
	*mock.Call
}

// EvaluationNamespaceSnapshot is a helper method to define mock.On call
//   - context1
//   - s
func (_e *MockEnvironment_Expecter) EvaluationNamespaceSnapshot(context1 interface{}, s interface{}) *MockEnvironment_EvaluationNamespaceSnapshot_Call {
	return &MockEnvironment_EvaluationNamespaceSnapshot_Call{Call: _e.mock.On("EvaluationNamespaceSnapshot", context1, s)}
}

func (_c *MockEnvironment_EvaluationNamespaceSnapshot_Call) Run(run func(context1 context.Context, s string)) *MockEnvironment_EvaluationNamespaceSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockEnvironment_EvaluationNamespaceSnapshot_Call) Return(evaluationNamespaceSnapshot *evaluation.EvaluationNamespaceSnapshot, err error) *MockEnvironment_EvaluationNamespaceSnapshot_Call {
	_c.Call.Return(evaluationNamespaceSnapshot, err)
	return _c
}

func (_c *MockEnvironment_EvaluationNamespaceSnapshot_Call) RunAndReturn(run func(context1 context.Context, s string) (*evaluation.EvaluationNamespaceSnapshot, error)) *MockEnvironment_EvaluationNamespaceSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// EvaluationNamespaceSnapshotSubscribe provides a mock function for the type MockEnvironment
func (_mock *MockEnvironment) EvaluationNamespaceSnapshotSubscribe(context1 context.Context, s string, evaluationNamespaceSnapshotCh chan<- *evaluation.EvaluationNamespaceSnapshot) (io.Closer, error) {
	ret := _mock.Called(context1, s, evaluationNamespaceSnapshotCh)

	if len(ret) == 0 {
		panic("no return value specified for EvaluationNamespaceSnapshotSubscribe")
	}

	var r0 io.Closer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, chan<- *evaluation.EvaluationNamespaceSnapshot) (io.Closer, error)); ok {
		return returnFunc(context1, s, evaluationNamespaceSnapshotCh)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, chan<- *evaluation.EvaluationNamespaceSnapshot) io.Closer); ok {
		r0 = returnFunc(context1, s, evaluationNamespaceSnapshotCh)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Closer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, chan<- *evaluation.EvaluationNamespaceSnapshot) error); ok {
		r1 = returnFunc(context1, s, evaluationNamespaceSnapshotCh)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEnvironment_EvaluationNamespaceSnapshotSubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvaluationNamespaceSnapshotSubscribe'
type MockEnvironment_EvaluationNamespaceSnapshotSubscribe_Call struct {
	*mock.Call
}

// EvaluationNamespaceSnapshotSubscribe is a helper method to define mock.On call
//   - context1
//   - s
//   - evaluationNamespaceSnapshotCh
func (_e *MockEnvironment_Expecter) EvaluationNamespaceSnapshotSubscribe(context1 interface{}, s interface{}, evaluationNamespaceSnapshotCh interface{}) *MockEnvironment_EvaluationNamespaceSnapshotSubscribe_Call {
	return &MockEnvironment_EvaluationNamespaceSnapshotSubscribe_Call{Call: _e.mock.On("EvaluationNamespaceSnapshotSubscribe", context1, s, evaluationNamespaceSnapshotCh)}
}

func (_c *MockEnvironment_EvaluationNamespaceSnapshotSubscribe_Call) Run(run func(context1 context.Context, s string, evaluationNamespaceSnapshotCh chan<- *evaluation.EvaluationNamespaceSnapshot)) *MockEnvironment_EvaluationNamespaceSnapshotSubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(chan<- *evaluation.EvaluationNamespaceSnapshot))
	})
	return _c
}

func (_c *MockEnvironment_EvaluationNamespaceSnapshotSubscribe_Call) Return(closer io.Closer, err error) *MockEnvironment_EvaluationNamespaceSnapshotSubscribe_Call {
	_c.Call.Return(closer, err)
	return _c
}

func (_c *MockEnvironment_EvaluationNamespaceSnapshotSubscribe_Call) RunAndReturn(run func(context1 context.Context, s string, evaluationNamespaceSnapshotCh chan<- *evaluation.EvaluationNamespaceSnapshot) (io.Closer, error)) *MockEnvironment_EvaluationNamespaceSnapshotSubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// EvaluationStore provides a mock function for the type MockEnvironment
func (_mock *MockEnvironment) EvaluationStore() (storage.ReadOnlyStore, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EvaluationStore")
	}

	var r0 storage.ReadOnlyStore
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (storage.ReadOnlyStore, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() storage.ReadOnlyStore); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.ReadOnlyStore)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEnvironment_EvaluationStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EvaluationStore'
type MockEnvironment_EvaluationStore_Call struct {
	*mock.Call
}

// EvaluationStore is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) EvaluationStore() *MockEnvironment_EvaluationStore_Call {
	return &MockEnvironment_EvaluationStore_Call{Call: _e.mock.On("EvaluationStore")}
}

func (_c *MockEnvironment_EvaluationStore_Call) Run(run func()) *MockEnvironment_EvaluationStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_EvaluationStore_Call) Return(readOnlyStore storage.ReadOnlyStore, err error) *MockEnvironment_EvaluationStore_Call {
	_c.Call.Return(readOnlyStore, err)
	return _c
}

func (_c *MockEnvironment_EvaluationStore_Call) RunAndReturn(run func() (storage.ReadOnlyStore, error)) *MockEnvironment_EvaluationStore_Call {
	_c.Call.Return(run)
	return _c
}

// GetNamespace provides a mock function for the type MockEnvironment
func (_mock *MockEnvironment) GetNamespace(context1 context.Context, key string) (*environments.NamespaceResponse, error) {
	ret := _mock.Called(context1, key)

	if len(ret) == 0 {
		panic("no return value specified for GetNamespace")
	}

	var r0 *environments.NamespaceResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*environments.NamespaceResponse, error)); ok {
		return returnFunc(context1, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *environments.NamespaceResponse); ok {
		r0 = returnFunc(context1, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*environments.NamespaceResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEnvironment_GetNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNamespace'
type MockEnvironment_GetNamespace_Call struct {
	*mock.Call
}

// GetNamespace is a helper method to define mock.On call
//   - context1
//   - key
func (_e *MockEnvironment_Expecter) GetNamespace(context1 interface{}, key interface{}) *MockEnvironment_GetNamespace_Call {
	return &MockEnvironment_GetNamespace_Call{Call: _e.mock.On("GetNamespace", context1, key)}
}

func (_c *MockEnvironment_GetNamespace_Call) Run(run func(context1 context.Context, key string)) *MockEnvironment_GetNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockEnvironment_GetNamespace_Call) Return(namespaceResponse *environments.NamespaceResponse, err error) *MockEnvironment_GetNamespace_Call {
	_c.Call.Return(namespaceResponse, err)
	return _c
}

func (_c *MockEnvironment_GetNamespace_Call) RunAndReturn(run func(context1 context.Context, key string) (*environments.NamespaceResponse, error)) *MockEnvironment_GetNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// Key provides a mock function for the type MockEnvironment
func (_mock *MockEnvironment) Key() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Key")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockEnvironment_Key_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Key'
type MockEnvironment_Key_Call struct {
	*mock.Call
}

// Key is a helper method to define mock.On call
func (_e *MockEnvironment_Expecter) Key() *MockEnvironment_Key_Call {
	return &MockEnvironment_Key_Call{Call: _e.mock.On("Key")}
}

func (_c *MockEnvironment_Key_Call) Run(run func()) *MockEnvironment_Key_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnvironment_Key_Call) Return(s string) *MockEnvironment_Key_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockEnvironment_Key_Call) RunAndReturn(run func() string) *MockEnvironment_Key_Call {
	_c.Call.Return(run)
	return _c
}

// ListBranchedChanges provides a mock function for the type MockEnvironment
func (_mock *MockEnvironment) ListBranchedChanges(ctx context.Context, base Environment) (*environments.ListBranchedEnvironmentChangesResponse, error) {
	ret := _mock.Called(ctx, base)

	if len(ret) == 0 {
		panic("no return value specified for ListBranchedChanges")
	}

	var r0 *environments.ListBranchedEnvironmentChangesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, Environment) (*environments.ListBranchedEnvironmentChangesResponse, error)); ok {
		return returnFunc(ctx, base)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, Environment) *environments.ListBranchedEnvironmentChangesResponse); ok {
		r0 = returnFunc(ctx, base)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*environments.ListBranchedEnvironmentChangesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, Environment) error); ok {
		r1 = returnFunc(ctx, base)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEnvironment_ListBranchedChanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBranchedChanges'
type MockEnvironment_ListBranchedChanges_Call struct {
	*mock.Call
}

// ListBranchedChanges is a helper method to define mock.On call
//   - ctx
//   - base
func (_e *MockEnvironment_Expecter) ListBranchedChanges(ctx interface{}, base interface{}) *MockEnvironment_ListBranchedChanges_Call {
	return &MockEnvironment_ListBranchedChanges_Call{Call: _e.mock.On("ListBranchedChanges", ctx, base)}
}

func (_c *MockEnvironment_ListBranchedChanges_Call) Run(run func(ctx context.Context, base Environment)) *MockEnvironment_ListBranchedChanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Environment))
	})
	return _c
}

func (_c *MockEnvironment_ListBranchedChanges_Call) Return(listBranchedEnvironmentChangesResponse *environments.ListBranchedEnvironmentChangesResponse, err error) *MockEnvironment_ListBranchedChanges_Call {
	_c.Call.Return(listBranchedEnvironmentChangesResponse, err)
	return _c
}

func (_c *MockEnvironment_ListBranchedChanges_Call) RunAndReturn(run func(ctx context.Context, base Environment) (*environments.ListBranchedEnvironmentChangesResponse, error)) *MockEnvironment_ListBranchedChanges_Call {
	_c.Call.Return(run)
	return _c
}

// ListBranches provides a mock function for the type MockEnvironment
func (_mock *MockEnvironment) ListBranches(ctx context.Context) (*environments.ListEnvironmentBranchesResponse, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListBranches")
	}

	var r0 *environments.ListEnvironmentBranchesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*environments.ListEnvironmentBranchesResponse, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *environments.ListEnvironmentBranchesResponse); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*environments.ListEnvironmentBranchesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEnvironment_ListBranches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBranches'
type MockEnvironment_ListBranches_Call struct {
	*mock.Call
}

// ListBranches is a helper method to define mock.On call
//   - ctx
func (_e *MockEnvironment_Expecter) ListBranches(ctx interface{}) *MockEnvironment_ListBranches_Call {
	return &MockEnvironment_ListBranches_Call{Call: _e.mock.On("ListBranches", ctx)}
}

func (_c *MockEnvironment_ListBranches_Call) Run(run func(ctx context.Context)) *MockEnvironment_ListBranches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockEnvironment_ListBranches_Call) Return(listEnvironmentBranchesResponse *environments.ListEnvironmentBranchesResponse, err error) *MockEnvironment_ListBranches_Call {
	_c.Call.Return(listEnvironmentBranchesResponse, err)
	return _c
}

func (_c *MockEnvironment_ListBranches_Call) RunAndReturn(run func(ctx context.Context) (*environments.ListEnvironmentBranchesResponse, error)) *MockEnvironment_ListBranches_Call {
	_c.Call.Return(run)
	return _c
}

// ListNamespaces provides a mock function for the type MockEnvironment
func (_mock *MockEnvironment) ListNamespaces(context1 context.Context) (*environments.ListNamespacesResponse, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for ListNamespaces")
	}

	var r0 *environments.ListNamespacesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*environments.ListNamespacesResponse, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *environments.ListNamespacesResponse); ok {
		r0 = returnFunc(context1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*environments.ListNamespacesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEnvironment_ListNamespaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNamespaces'
type MockEnvironment_ListNamespaces_Call struct {
	*mock.Call
}

// ListNamespaces is a helper method to define mock.On call
//   - context1
func (_e *MockEnvironment_Expecter) ListNamespaces(context1 interface{}) *MockEnvironment_ListNamespaces_Call {
	return &MockEnvironment_ListNamespaces_Call{Call: _e.mock.On("ListNamespaces", context1)}
}

func (_c *MockEnvironment_ListNamespaces_Call) Run(run func(context1 context.Context)) *MockEnvironment_ListNamespaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockEnvironment_ListNamespaces_Call) Return(listNamespacesResponse *environments.ListNamespacesResponse, err error) *MockEnvironment_ListNamespaces_Call {
	_c.Call.Return(listNamespacesResponse, err)
	return _c
}

func (_c *MockEnvironment_ListNamespaces_Call) RunAndReturn(run func(context1 context.Context) (*environments.ListNamespacesResponse, error)) *MockEnvironment_ListNamespaces_Call {
	_c.Call.Return(run)
	return _c
}

// Propose provides a mock function for the type MockEnvironment
func (_mock *MockEnvironment) Propose(ctx context.Context, base Environment, opts ProposalOptions) (*environments.EnvironmentProposalDetails, error) {
	ret := _mock.Called(ctx, base, opts)

	if len(ret) == 0 {
		panic("no return value specified for Propose")
	}

	var r0 *environments.EnvironmentProposalDetails
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, Environment, ProposalOptions) (*environments.EnvironmentProposalDetails, error)); ok {
		return returnFunc(ctx, base, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, Environment, ProposalOptions) *environments.EnvironmentProposalDetails); ok {
		r0 = returnFunc(ctx, base, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*environments.EnvironmentProposalDetails)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, Environment, ProposalOptions) error); ok {
		r1 = returnFunc(ctx, base, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEnvironment_Propose_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Propose'
type MockEnvironment_Propose_Call struct {
	*mock.Call
}

// Propose is a helper method to define mock.On call
//   - ctx
//   - base
//   - opts
func (_e *MockEnvironment_Expecter) Propose(ctx interface{}, base interface{}, opts interface{}) *MockEnvironment_Propose_Call {
	return &MockEnvironment_Propose_Call{Call: _e.mock.On("Propose", ctx, base, opts)}
}

func (_c *MockEnvironment_Propose_Call) Run(run func(ctx context.Context, base Environment, opts ProposalOptions)) *MockEnvironment_Propose_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(Environment), args[2].(ProposalOptions))
	})
	return _c
}

func (_c *MockEnvironment_Propose_Call) Return(environmentProposalDetails *environments.EnvironmentProposalDetails, err error) *MockEnvironment_Propose_Call {
	_c.Call.Return(environmentProposalDetails, err)
	return _c
}

func (_c *MockEnvironment_Propose_Call) RunAndReturn(run func(ctx context.Context, base Environment, opts ProposalOptions) (*environments.EnvironmentProposalDetails, error)) *MockEnvironment_Propose_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockEnvironment
func (_mock *MockEnvironment) Update(context1 context.Context, rev string, typ ResourceType, fn UpdateFunc) (string, error) {
	ret := _mock.Called(context1, rev, typ, fn)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ResourceType, UpdateFunc) (string, error)); ok {
		return returnFunc(context1, rev, typ, fn)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ResourceType, UpdateFunc) string); ok {
		r0 = returnFunc(context1, rev, typ, fn)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ResourceType, UpdateFunc) error); ok {
		r1 = returnFunc(context1, rev, typ, fn)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEnvironment_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockEnvironment_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - context1
//   - rev
//   - typ
//   - fn
func (_e *MockEnvironment_Expecter) Update(context1 interface{}, rev interface{}, typ interface{}, fn interface{}) *MockEnvironment_Update_Call {
	return &MockEnvironment_Update_Call{Call: _e.mock.On("Update", context1, rev, typ, fn)}
}

func (_c *MockEnvironment_Update_Call) Run(run func(context1 context.Context, rev string, typ ResourceType, fn UpdateFunc)) *MockEnvironment_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(ResourceType), args[3].(UpdateFunc))
	})
	return _c
}

func (_c *MockEnvironment_Update_Call) Return(s string, err error) *MockEnvironment_Update_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockEnvironment_Update_Call) RunAndReturn(run func(context1 context.Context, rev string, typ ResourceType, fn UpdateFunc) (string, error)) *MockEnvironment_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNamespace provides a mock function for the type MockEnvironment
func (_mock *MockEnvironment) UpdateNamespace(context1 context.Context, rev string, namespace *environments.Namespace) (string, error) {
	ret := _mock.Called(context1, rev, namespace)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNamespace")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *environments.Namespace) (string, error)); ok {
		return returnFunc(context1, rev, namespace)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *environments.Namespace) string); ok {
		r0 = returnFunc(context1, rev, namespace)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *environments.Namespace) error); ok {
		r1 = returnFunc(context1, rev, namespace)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEnvironment_UpdateNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNamespace'
type MockEnvironment_UpdateNamespace_Call struct {
	*mock.Call
}

// UpdateNamespace is a helper method to define mock.On call
//   - context1
//   - rev
//   - namespace
func (_e *MockEnvironment_Expecter) UpdateNamespace(context1 interface{}, rev interface{}, namespace interface{}) *MockEnvironment_UpdateNamespace_Call {
	return &MockEnvironment_UpdateNamespace_Call{Call: _e.mock.On("UpdateNamespace", context1, rev, namespace)}
}

func (_c *MockEnvironment_UpdateNamespace_Call) Run(run func(context1 context.Context, rev string, namespace *environments.Namespace)) *MockEnvironment_UpdateNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*environments.Namespace))
	})
	return _c
}

func (_c *MockEnvironment_UpdateNamespace_Call) Return(s string, err error) *MockEnvironment_UpdateNamespace_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockEnvironment_UpdateNamespace_Call) RunAndReturn(run func(context1 context.Context, rev string, namespace *environments.Namespace) (string, error)) *MockEnvironment_UpdateNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// View provides a mock function for the type MockEnvironment
func (_mock *MockEnvironment) View(context1 context.Context, typ ResourceType, fn ViewFunc) error {
	ret := _mock.Called(context1, typ, fn)

	if len(ret) == 0 {
		panic("no return value specified for View")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ResourceType, ViewFunc) error); ok {
		r0 = returnFunc(context1, typ, fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEnvironment_View_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'View'
type MockEnvironment_View_Call struct {
	*mock.Call
}

// View is a helper method to define mock.On call
//   - context1
//   - typ
//   - fn
func (_e *MockEnvironment_Expecter) View(context1 interface{}, typ interface{}, fn interface{}) *MockEnvironment_View_Call {
	return &MockEnvironment_View_Call{Call: _e.mock.On("View", context1, typ, fn)}
}

func (_c *MockEnvironment_View_Call) Run(run func(context1 context.Context, typ ResourceType, fn ViewFunc)) *MockEnvironment_View_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ResourceType), args[2].(ViewFunc))
	})
	return _c
}

func (_c *MockEnvironment_View_Call) Return(err error) *MockEnvironment_View_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEnvironment_View_Call) RunAndReturn(run func(context1 context.Context, typ ResourceType, fn ViewFunc) error) *MockEnvironment_View_Call {
	_c.Call.Return(run)
	return _c
}
