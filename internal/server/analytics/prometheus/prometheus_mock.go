// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package prometheus

import (
	"context"

	"github.com/prometheus/client_golang/api/prometheus/v1"
	"github.com/prometheus/common/model"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPrometheusClient creates a new instance of MockPrometheusClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPrometheusClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPrometheusClient {
	mock := &MockPrometheusClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPrometheusClient is an autogenerated mock type for the PrometheusClient type
type MockPrometheusClient struct {
	mock.Mock
}

type MockPrometheusClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPrometheusClient) EXPECT() *MockPrometheusClient_Expecter {
	return &MockPrometheusClient_Expecter{mock: &_m.Mock}
}

// QueryRange provides a mock function for the type MockPrometheusClient
func (_mock *MockPrometheusClient) QueryRange(ctx context.Context, query string, r v1.Range, opts ...v1.Option) (model.Value, v1.Warnings, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, query, r, opts)
	} else {
		tmpRet = _mock.Called(ctx, query, r)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for QueryRange")
	}

	var r0 model.Value
	var r1 v1.Warnings
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v1.Range, ...v1.Option) (model.Value, v1.Warnings, error)); ok {
		return returnFunc(ctx, query, r, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, v1.Range, ...v1.Option) model.Value); ok {
		r0 = returnFunc(ctx, query, r, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Value)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, v1.Range, ...v1.Option) v1.Warnings); ok {
		r1 = returnFunc(ctx, query, r, opts...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(v1.Warnings)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, v1.Range, ...v1.Option) error); ok {
		r2 = returnFunc(ctx, query, r, opts...)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPrometheusClient_QueryRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRange'
type MockPrometheusClient_QueryRange_Call struct {
	*mock.Call
}

// QueryRange is a helper method to define mock.On call
//   - ctx
//   - query
//   - r
//   - opts
func (_e *MockPrometheusClient_Expecter) QueryRange(ctx interface{}, query interface{}, r interface{}, opts ...interface{}) *MockPrometheusClient_QueryRange_Call {
	return &MockPrometheusClient_QueryRange_Call{Call: _e.mock.On("QueryRange",
		append([]interface{}{ctx, query, r}, opts...)...)}
}

func (_c *MockPrometheusClient_QueryRange_Call) Run(run func(ctx context.Context, query string, r v1.Range, opts ...v1.Option)) *MockPrometheusClient_QueryRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[3].([]v1.Option)
		run(args[0].(context.Context), args[1].(string), args[2].(v1.Range), variadicArgs...)
	})
	return _c
}

func (_c *MockPrometheusClient_QueryRange_Call) Return(value model.Value, warnings v1.Warnings, err error) *MockPrometheusClient_QueryRange_Call {
	_c.Call.Return(value, warnings, err)
	return _c
}

func (_c *MockPrometheusClient_QueryRange_Call) RunAndReturn(run func(ctx context.Context, query string, r v1.Range, opts ...v1.Option) (model.Value, v1.Warnings, error)) *MockPrometheusClient_QueryRange_Call {
	_c.Call.Return(run)
	return _c
}
