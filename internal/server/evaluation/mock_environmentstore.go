// Code generated by mockery v2.53.3. DO NOT EDIT.

package evaluation

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	environments "go.flipt.io/flipt/internal/server/environments"
)

// MockEnvironmentStore is an autogenerated mock type for the EnvironmentStore type
type MockEnvironmentStore struct {
	mock.Mock
}

type MockEnvironmentStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEnvironmentStore) EXPECT() *MockEnvironmentStore_Expecter {
	return &MockEnvironmentStore_Expecter{mock: &_m.Mock}
}

// GetFromContext provides a mock function with given fields: _a0
func (_m *MockEnvironmentStore) GetFromContext(_a0 context.Context) environments.Environment {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetFromContext")
	}

	var r0 environments.Environment
	if rf, ok := ret.Get(0).(func(context.Context) environments.Environment); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(environments.Environment)
		}
	}

	return r0
}

// MockEnvironmentStore_GetFromContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFromContext'
type MockEnvironmentStore_GetFromContext_Call struct {
	*mock.Call
}

// GetFromContext is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockEnvironmentStore_Expecter) GetFromContext(_a0 interface{}) *MockEnvironmentStore_GetFromContext_Call {
	return &MockEnvironmentStore_GetFromContext_Call{Call: _e.mock.On("GetFromContext", _a0)}
}

func (_c *MockEnvironmentStore_GetFromContext_Call) Run(run func(_a0 context.Context)) *MockEnvironmentStore_GetFromContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockEnvironmentStore_GetFromContext_Call) Return(_a0 environments.Environment) *MockEnvironmentStore_GetFromContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnvironmentStore_GetFromContext_Call) RunAndReturn(run func(context.Context) environments.Environment) *MockEnvironmentStore_GetFromContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEnvironmentStore creates a new instance of MockEnvironmentStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEnvironmentStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEnvironmentStore {
	mock := &MockEnvironmentStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
