// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package azure

import (
	"context"

	"github.com/microsoft/azure-devops-go-api/azuredevops/v7/git"
	mock "github.com/stretchr/testify/mock"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// CreatePullRequest provides a mock function for the type MockClient
func (_mock *MockClient) CreatePullRequest(context1 context.Context, createPullRequestArgs git.CreatePullRequestArgs) (*git.GitPullRequest, error) {
	ret := _mock.Called(context1, createPullRequestArgs)

	if len(ret) == 0 {
		panic("no return value specified for CreatePullRequest")
	}

	var r0 *git.GitPullRequest
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, git.CreatePullRequestArgs) (*git.GitPullRequest, error)); ok {
		return returnFunc(context1, createPullRequestArgs)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, git.CreatePullRequestArgs) *git.GitPullRequest); ok {
		r0 = returnFunc(context1, createPullRequestArgs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*git.GitPullRequest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, git.CreatePullRequestArgs) error); ok {
		r1 = returnFunc(context1, createPullRequestArgs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_CreatePullRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePullRequest'
type MockClient_CreatePullRequest_Call struct {
	*mock.Call
}

// CreatePullRequest is a helper method to define mock.On call
//   - context1
//   - createPullRequestArgs
func (_e *MockClient_Expecter) CreatePullRequest(context1 interface{}, createPullRequestArgs interface{}) *MockClient_CreatePullRequest_Call {
	return &MockClient_CreatePullRequest_Call{Call: _e.mock.On("CreatePullRequest", context1, createPullRequestArgs)}
}

func (_c *MockClient_CreatePullRequest_Call) Run(run func(context1 context.Context, createPullRequestArgs git.CreatePullRequestArgs)) *MockClient_CreatePullRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.CreatePullRequestArgs))
	})
	return _c
}

func (_c *MockClient_CreatePullRequest_Call) Return(gitPullRequest *git.GitPullRequest, err error) *MockClient_CreatePullRequest_Call {
	_c.Call.Return(gitPullRequest, err)
	return _c
}

func (_c *MockClient_CreatePullRequest_Call) RunAndReturn(run func(context1 context.Context, createPullRequestArgs git.CreatePullRequestArgs) (*git.GitPullRequest, error)) *MockClient_CreatePullRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommits provides a mock function for the type MockClient
func (_mock *MockClient) GetCommits(context1 context.Context, getCommitsArgs git.GetCommitsArgs) (*[]git.GitCommitRef, error) {
	ret := _mock.Called(context1, getCommitsArgs)

	if len(ret) == 0 {
		panic("no return value specified for GetCommits")
	}

	var r0 *[]git.GitCommitRef
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, git.GetCommitsArgs) (*[]git.GitCommitRef, error)); ok {
		return returnFunc(context1, getCommitsArgs)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, git.GetCommitsArgs) *[]git.GitCommitRef); ok {
		r0 = returnFunc(context1, getCommitsArgs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.GitCommitRef)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, git.GetCommitsArgs) error); ok {
		r1 = returnFunc(context1, getCommitsArgs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetCommits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommits'
type MockClient_GetCommits_Call struct {
	*mock.Call
}

// GetCommits is a helper method to define mock.On call
//   - context1
//   - getCommitsArgs
func (_e *MockClient_Expecter) GetCommits(context1 interface{}, getCommitsArgs interface{}) *MockClient_GetCommits_Call {
	return &MockClient_GetCommits_Call{Call: _e.mock.On("GetCommits", context1, getCommitsArgs)}
}

func (_c *MockClient_GetCommits_Call) Run(run func(context1 context.Context, getCommitsArgs git.GetCommitsArgs)) *MockClient_GetCommits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetCommitsArgs))
	})
	return _c
}

func (_c *MockClient_GetCommits_Call) Return(gitCommitRefs *[]git.GitCommitRef, err error) *MockClient_GetCommits_Call {
	_c.Call.Return(gitCommitRefs, err)
	return _c
}

func (_c *MockClient_GetCommits_Call) RunAndReturn(run func(context1 context.Context, getCommitsArgs git.GetCommitsArgs) (*[]git.GitCommitRef, error)) *MockClient_GetCommits_Call {
	_c.Call.Return(run)
	return _c
}

// GetPullRequests provides a mock function for the type MockClient
func (_mock *MockClient) GetPullRequests(context1 context.Context, getPullRequestsArgs git.GetPullRequestsArgs) (*[]git.GitPullRequest, error) {
	ret := _mock.Called(context1, getPullRequestsArgs)

	if len(ret) == 0 {
		panic("no return value specified for GetPullRequests")
	}

	var r0 *[]git.GitPullRequest
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, git.GetPullRequestsArgs) (*[]git.GitPullRequest, error)); ok {
		return returnFunc(context1, getPullRequestsArgs)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, git.GetPullRequestsArgs) *[]git.GitPullRequest); ok {
		r0 = returnFunc(context1, getPullRequestsArgs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]git.GitPullRequest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, git.GetPullRequestsArgs) error); ok {
		r1 = returnFunc(context1, getPullRequestsArgs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetPullRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPullRequests'
type MockClient_GetPullRequests_Call struct {
	*mock.Call
}

// GetPullRequests is a helper method to define mock.On call
//   - context1
//   - getPullRequestsArgs
func (_e *MockClient_Expecter) GetPullRequests(context1 interface{}, getPullRequestsArgs interface{}) *MockClient_GetPullRequests_Call {
	return &MockClient_GetPullRequests_Call{Call: _e.mock.On("GetPullRequests", context1, getPullRequestsArgs)}
}

func (_c *MockClient_GetPullRequests_Call) Run(run func(context1 context.Context, getPullRequestsArgs git.GetPullRequestsArgs)) *MockClient_GetPullRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(git.GetPullRequestsArgs))
	})
	return _c
}

func (_c *MockClient_GetPullRequests_Call) Return(gitPullRequests *[]git.GitPullRequest, err error) *MockClient_GetPullRequests_Call {
	_c.Call.Return(gitPullRequests, err)
	return _c
}

func (_c *MockClient_GetPullRequests_Call) RunAndReturn(run func(context1 context.Context, getPullRequestsArgs git.GetPullRequestsArgs) (*[]git.GitPullRequest, error)) *MockClient_GetPullRequests_Call {
	_c.Call.Return(run)
	return _c
}
