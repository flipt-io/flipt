// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package bitbucket

import (
	"github.com/ktrysmt/go-bitbucket"
	mock "github.com/stretchr/testify/mock"
)

// NewMockPullRequestsService creates a new instance of MockPullRequestsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPullRequestsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPullRequestsService {
	mock := &MockPullRequestsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPullRequestsService is an autogenerated mock type for the PullRequestsService type
type MockPullRequestsService struct {
	mock.Mock
}

type MockPullRequestsService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPullRequestsService) EXPECT() *MockPullRequestsService_Expecter {
	return &MockPullRequestsService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockPullRequestsService
func (_mock *MockPullRequestsService) Create(po *bitbucket.PullRequestsOptions) (any, error) {
	ret := _mock.Called(po)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*bitbucket.PullRequestsOptions) (any, error)); ok {
		return returnFunc(po)
	}
	if returnFunc, ok := ret.Get(0).(func(*bitbucket.PullRequestsOptions) any); ok {
		r0 = returnFunc(po)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*bitbucket.PullRequestsOptions) error); ok {
		r1 = returnFunc(po)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPullRequestsService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPullRequestsService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - po
func (_e *MockPullRequestsService_Expecter) Create(po interface{}) *MockPullRequestsService_Create_Call {
	return &MockPullRequestsService_Create_Call{Call: _e.mock.On("Create", po)}
}

func (_c *MockPullRequestsService_Create_Call) Run(run func(po *bitbucket.PullRequestsOptions)) *MockPullRequestsService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bitbucket.PullRequestsOptions))
	})
	return _c
}

func (_c *MockPullRequestsService_Create_Call) Return(v any, err error) *MockPullRequestsService_Create_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockPullRequestsService_Create_Call) RunAndReturn(run func(po *bitbucket.PullRequestsOptions) (any, error)) *MockPullRequestsService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Gets provides a mock function for the type MockPullRequestsService
func (_mock *MockPullRequestsService) Gets(po *bitbucket.PullRequestsOptions) (any, error) {
	ret := _mock.Called(po)

	if len(ret) == 0 {
		panic("no return value specified for Gets")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*bitbucket.PullRequestsOptions) (any, error)); ok {
		return returnFunc(po)
	}
	if returnFunc, ok := ret.Get(0).(func(*bitbucket.PullRequestsOptions) any); ok {
		r0 = returnFunc(po)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*bitbucket.PullRequestsOptions) error); ok {
		r1 = returnFunc(po)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPullRequestsService_Gets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Gets'
type MockPullRequestsService_Gets_Call struct {
	*mock.Call
}

// Gets is a helper method to define mock.On call
//   - po
func (_e *MockPullRequestsService_Expecter) Gets(po interface{}) *MockPullRequestsService_Gets_Call {
	return &MockPullRequestsService_Gets_Call{Call: _e.mock.On("Gets", po)}
}

func (_c *MockPullRequestsService_Gets_Call) Run(run func(po *bitbucket.PullRequestsOptions)) *MockPullRequestsService_Gets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bitbucket.PullRequestsOptions))
	})
	return _c
}

func (_c *MockPullRequestsService_Gets_Call) Return(v any, err error) *MockPullRequestsService_Gets_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockPullRequestsService_Gets_Call) RunAndReturn(run func(po *bitbucket.PullRequestsOptions) (any, error)) *MockPullRequestsService_Gets_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommitsService creates a new instance of MockCommitsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommitsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommitsService {
	mock := &MockCommitsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCommitsService is an autogenerated mock type for the CommitsService type
type MockCommitsService struct {
	mock.Mock
}

type MockCommitsService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommitsService) EXPECT() *MockCommitsService_Expecter {
	return &MockCommitsService_Expecter{mock: &_m.Mock}
}

// GetCommits provides a mock function for the type MockCommitsService
func (_mock *MockCommitsService) GetCommits(cmo *bitbucket.CommitsOptions) (any, error) {
	ret := _mock.Called(cmo)

	if len(ret) == 0 {
		panic("no return value specified for GetCommits")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*bitbucket.CommitsOptions) (any, error)); ok {
		return returnFunc(cmo)
	}
	if returnFunc, ok := ret.Get(0).(func(*bitbucket.CommitsOptions) any); ok {
		r0 = returnFunc(cmo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*bitbucket.CommitsOptions) error); ok {
		r1 = returnFunc(cmo)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCommitsService_GetCommits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommits'
type MockCommitsService_GetCommits_Call struct {
	*mock.Call
}

// GetCommits is a helper method to define mock.On call
//   - cmo
func (_e *MockCommitsService_Expecter) GetCommits(cmo interface{}) *MockCommitsService_GetCommits_Call {
	return &MockCommitsService_GetCommits_Call{Call: _e.mock.On("GetCommits", cmo)}
}

func (_c *MockCommitsService_GetCommits_Call) Run(run func(cmo *bitbucket.CommitsOptions)) *MockCommitsService_GetCommits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bitbucket.CommitsOptions))
	})
	return _c
}

func (_c *MockCommitsService_GetCommits_Call) Return(v any, err error) *MockCommitsService_GetCommits_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockCommitsService_GetCommits_Call) RunAndReturn(run func(cmo *bitbucket.CommitsOptions) (any, error)) *MockCommitsService_GetCommits_Call {
	_c.Call.Return(run)
	return _c
}
