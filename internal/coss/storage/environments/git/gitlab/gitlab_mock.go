// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package gitlab

import (
	mock "github.com/stretchr/testify/mock"
	gitlab "gitlab.com/gitlab-org/api/client-go"
)

// NewMockMergeRequestsService creates a new instance of MockMergeRequestsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMergeRequestsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMergeRequestsService {
	mock := &MockMergeRequestsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMergeRequestsService is an autogenerated mock type for the MergeRequestsService type
type MockMergeRequestsService struct {
	mock.Mock
}

type MockMergeRequestsService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMergeRequestsService) EXPECT() *MockMergeRequestsService_Expecter {
	return &MockMergeRequestsService_Expecter{mock: &_m.Mock}
}

// CreateMergeRequest provides a mock function for the type MockMergeRequestsService
func (_mock *MockMergeRequestsService) CreateMergeRequest(pid any, opt *gitlab.CreateMergeRequestOptions, options ...gitlab.RequestOptionFunc) (*gitlab.MergeRequest, *gitlab.Response, error) {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(pid, opt, options)
	} else {
		tmpRet = _mock.Called(pid, opt)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreateMergeRequest")
	}

	var r0 *gitlab.MergeRequest
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(any, *gitlab.CreateMergeRequestOptions, ...gitlab.RequestOptionFunc) (*gitlab.MergeRequest, *gitlab.Response, error)); ok {
		return returnFunc(pid, opt, options...)
	}
	if returnFunc, ok := ret.Get(0).(func(any, *gitlab.CreateMergeRequestOptions, ...gitlab.RequestOptionFunc) *gitlab.MergeRequest); ok {
		r0 = returnFunc(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.MergeRequest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(any, *gitlab.CreateMergeRequestOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = returnFunc(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(any, *gitlab.CreateMergeRequestOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = returnFunc(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockMergeRequestsService_CreateMergeRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMergeRequest'
type MockMergeRequestsService_CreateMergeRequest_Call struct {
	*mock.Call
}

// CreateMergeRequest is a helper method to define mock.On call
//   - pid
//   - opt
//   - options
func (_e *MockMergeRequestsService_Expecter) CreateMergeRequest(pid interface{}, opt interface{}, options ...interface{}) *MockMergeRequestsService_CreateMergeRequest_Call {
	return &MockMergeRequestsService_CreateMergeRequest_Call{Call: _e.mock.On("CreateMergeRequest",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *MockMergeRequestsService_CreateMergeRequest_Call) Run(run func(pid any, opt *gitlab.CreateMergeRequestOptions, options ...gitlab.RequestOptionFunc)) *MockMergeRequestsService_CreateMergeRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]gitlab.RequestOptionFunc)
		run(args[0].(any), args[1].(*gitlab.CreateMergeRequestOptions), variadicArgs...)
	})
	return _c
}

func (_c *MockMergeRequestsService_CreateMergeRequest_Call) Return(mergeRequest *gitlab.MergeRequest, response *gitlab.Response, err error) *MockMergeRequestsService_CreateMergeRequest_Call {
	_c.Call.Return(mergeRequest, response, err)
	return _c
}

func (_c *MockMergeRequestsService_CreateMergeRequest_Call) RunAndReturn(run func(pid any, opt *gitlab.CreateMergeRequestOptions, options ...gitlab.RequestOptionFunc) (*gitlab.MergeRequest, *gitlab.Response, error)) *MockMergeRequestsService_CreateMergeRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectMergeRequests provides a mock function for the type MockMergeRequestsService
func (_mock *MockMergeRequestsService) ListProjectMergeRequests(pid any, opt *gitlab.ListProjectMergeRequestsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.BasicMergeRequest, *gitlab.Response, error) {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(pid, opt, options)
	} else {
		tmpRet = _mock.Called(pid, opt)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ListProjectMergeRequests")
	}

	var r0 []*gitlab.BasicMergeRequest
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(any, *gitlab.ListProjectMergeRequestsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.BasicMergeRequest, *gitlab.Response, error)); ok {
		return returnFunc(pid, opt, options...)
	}
	if returnFunc, ok := ret.Get(0).(func(any, *gitlab.ListProjectMergeRequestsOptions, ...gitlab.RequestOptionFunc) []*gitlab.BasicMergeRequest); ok {
		r0 = returnFunc(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitlab.BasicMergeRequest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(any, *gitlab.ListProjectMergeRequestsOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = returnFunc(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(any, *gitlab.ListProjectMergeRequestsOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = returnFunc(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockMergeRequestsService_ListProjectMergeRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectMergeRequests'
type MockMergeRequestsService_ListProjectMergeRequests_Call struct {
	*mock.Call
}

// ListProjectMergeRequests is a helper method to define mock.On call
//   - pid
//   - opt
//   - options
func (_e *MockMergeRequestsService_Expecter) ListProjectMergeRequests(pid interface{}, opt interface{}, options ...interface{}) *MockMergeRequestsService_ListProjectMergeRequests_Call {
	return &MockMergeRequestsService_ListProjectMergeRequests_Call{Call: _e.mock.On("ListProjectMergeRequests",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *MockMergeRequestsService_ListProjectMergeRequests_Call) Run(run func(pid any, opt *gitlab.ListProjectMergeRequestsOptions, options ...gitlab.RequestOptionFunc)) *MockMergeRequestsService_ListProjectMergeRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]gitlab.RequestOptionFunc)
		run(args[0].(any), args[1].(*gitlab.ListProjectMergeRequestsOptions), variadicArgs...)
	})
	return _c
}

func (_c *MockMergeRequestsService_ListProjectMergeRequests_Call) Return(basicMergeRequests []*gitlab.BasicMergeRequest, response *gitlab.Response, err error) *MockMergeRequestsService_ListProjectMergeRequests_Call {
	_c.Call.Return(basicMergeRequests, response, err)
	return _c
}

func (_c *MockMergeRequestsService_ListProjectMergeRequests_Call) RunAndReturn(run func(pid any, opt *gitlab.ListProjectMergeRequestsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.BasicMergeRequest, *gitlab.Response, error)) *MockMergeRequestsService_ListProjectMergeRequests_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepositoriesService creates a new instance of MockRepositoriesService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepositoriesService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepositoriesService {
	mock := &MockRepositoriesService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepositoriesService is an autogenerated mock type for the RepositoriesService type
type MockRepositoriesService struct {
	mock.Mock
}

type MockRepositoriesService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepositoriesService) EXPECT() *MockRepositoriesService_Expecter {
	return &MockRepositoriesService_Expecter{mock: &_m.Mock}
}

// Compare provides a mock function for the type MockRepositoriesService
func (_mock *MockRepositoriesService) Compare(pid any, opt *gitlab.CompareOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Compare, *gitlab.Response, error) {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(pid, opt, options)
	} else {
		tmpRet = _mock.Called(pid, opt)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Compare")
	}

	var r0 *gitlab.Compare
	var r1 *gitlab.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(any, *gitlab.CompareOptions, ...gitlab.RequestOptionFunc) (*gitlab.Compare, *gitlab.Response, error)); ok {
		return returnFunc(pid, opt, options...)
	}
	if returnFunc, ok := ret.Get(0).(func(any, *gitlab.CompareOptions, ...gitlab.RequestOptionFunc) *gitlab.Compare); ok {
		r0 = returnFunc(pid, opt, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitlab.Compare)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(any, *gitlab.CompareOptions, ...gitlab.RequestOptionFunc) *gitlab.Response); ok {
		r1 = returnFunc(pid, opt, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitlab.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(any, *gitlab.CompareOptions, ...gitlab.RequestOptionFunc) error); ok {
		r2 = returnFunc(pid, opt, options...)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRepositoriesService_Compare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compare'
type MockRepositoriesService_Compare_Call struct {
	*mock.Call
}

// Compare is a helper method to define mock.On call
//   - pid
//   - opt
//   - options
func (_e *MockRepositoriesService_Expecter) Compare(pid interface{}, opt interface{}, options ...interface{}) *MockRepositoriesService_Compare_Call {
	return &MockRepositoriesService_Compare_Call{Call: _e.mock.On("Compare",
		append([]interface{}{pid, opt}, options...)...)}
}

func (_c *MockRepositoriesService_Compare_Call) Run(run func(pid any, opt *gitlab.CompareOptions, options ...gitlab.RequestOptionFunc)) *MockRepositoriesService_Compare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]gitlab.RequestOptionFunc)
		run(args[0].(any), args[1].(*gitlab.CompareOptions), variadicArgs...)
	})
	return _c
}

func (_c *MockRepositoriesService_Compare_Call) Return(compare *gitlab.Compare, response *gitlab.Response, err error) *MockRepositoriesService_Compare_Call {
	_c.Call.Return(compare, response, err)
	return _c
}

func (_c *MockRepositoriesService_Compare_Call) RunAndReturn(run func(pid any, opt *gitlab.CompareOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Compare, *gitlab.Response, error)) *MockRepositoriesService_Compare_Call {
	_c.Call.Return(run)
	return _c
}
