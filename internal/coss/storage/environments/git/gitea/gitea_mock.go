// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package gitea

import (
	"code.gitea.io/sdk/gitea"
	mock "github.com/stretchr/testify/mock"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// CompareCommits provides a mock function for the type MockClient
func (_mock *MockClient) CompareCommits(user string, repo string, prev string, current string) (*gitea.Compare, *gitea.Response, error) {
	ret := _mock.Called(user, repo, prev, current)

	if len(ret) == 0 {
		panic("no return value specified for CompareCommits")
	}

	var r0 *gitea.Compare
	var r1 *gitea.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string) (*gitea.Compare, *gitea.Response, error)); ok {
		return returnFunc(user, repo, prev, current)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string) *gitea.Compare); ok {
		r0 = returnFunc(user, repo, prev, current)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitea.Compare)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string, string) *gitea.Response); ok {
		r1 = returnFunc(user, repo, prev, current)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitea.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(string, string, string, string) error); ok {
		r2 = returnFunc(user, repo, prev, current)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockClient_CompareCommits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompareCommits'
type MockClient_CompareCommits_Call struct {
	*mock.Call
}

// CompareCommits is a helper method to define mock.On call
//   - user
//   - repo
//   - prev
//   - current
func (_e *MockClient_Expecter) CompareCommits(user interface{}, repo interface{}, prev interface{}, current interface{}) *MockClient_CompareCommits_Call {
	return &MockClient_CompareCommits_Call{Call: _e.mock.On("CompareCommits", user, repo, prev, current)}
}

func (_c *MockClient_CompareCommits_Call) Run(run func(user string, repo string, prev string, current string)) *MockClient_CompareCommits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockClient_CompareCommits_Call) Return(compare *gitea.Compare, response *gitea.Response, err error) *MockClient_CompareCommits_Call {
	_c.Call.Return(compare, response, err)
	return _c
}

func (_c *MockClient_CompareCommits_Call) RunAndReturn(run func(user string, repo string, prev string, current string) (*gitea.Compare, *gitea.Response, error)) *MockClient_CompareCommits_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePullRequest provides a mock function for the type MockClient
func (_mock *MockClient) CreatePullRequest(owner string, repo string, opt gitea.CreatePullRequestOption) (*gitea.PullRequest, *gitea.Response, error) {
	ret := _mock.Called(owner, repo, opt)

	if len(ret) == 0 {
		panic("no return value specified for CreatePullRequest")
	}

	var r0 *gitea.PullRequest
	var r1 *gitea.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string, string, gitea.CreatePullRequestOption) (*gitea.PullRequest, *gitea.Response, error)); ok {
		return returnFunc(owner, repo, opt)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, gitea.CreatePullRequestOption) *gitea.PullRequest); ok {
		r0 = returnFunc(owner, repo, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gitea.PullRequest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, gitea.CreatePullRequestOption) *gitea.Response); ok {
		r1 = returnFunc(owner, repo, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitea.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(string, string, gitea.CreatePullRequestOption) error); ok {
		r2 = returnFunc(owner, repo, opt)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockClient_CreatePullRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePullRequest'
type MockClient_CreatePullRequest_Call struct {
	*mock.Call
}

// CreatePullRequest is a helper method to define mock.On call
//   - owner
//   - repo
//   - opt
func (_e *MockClient_Expecter) CreatePullRequest(owner interface{}, repo interface{}, opt interface{}) *MockClient_CreatePullRequest_Call {
	return &MockClient_CreatePullRequest_Call{Call: _e.mock.On("CreatePullRequest", owner, repo, opt)}
}

func (_c *MockClient_CreatePullRequest_Call) Run(run func(owner string, repo string, opt gitea.CreatePullRequestOption)) *MockClient_CreatePullRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(gitea.CreatePullRequestOption))
	})
	return _c
}

func (_c *MockClient_CreatePullRequest_Call) Return(pullRequest *gitea.PullRequest, response *gitea.Response, err error) *MockClient_CreatePullRequest_Call {
	_c.Call.Return(pullRequest, response, err)
	return _c
}

func (_c *MockClient_CreatePullRequest_Call) RunAndReturn(run func(owner string, repo string, opt gitea.CreatePullRequestOption) (*gitea.PullRequest, *gitea.Response, error)) *MockClient_CreatePullRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListRepoPullRequests provides a mock function for the type MockClient
func (_mock *MockClient) ListRepoPullRequests(owner string, repo string, opt gitea.ListPullRequestsOptions) ([]*gitea.PullRequest, *gitea.Response, error) {
	ret := _mock.Called(owner, repo, opt)

	if len(ret) == 0 {
		panic("no return value specified for ListRepoPullRequests")
	}

	var r0 []*gitea.PullRequest
	var r1 *gitea.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string, string, gitea.ListPullRequestsOptions) ([]*gitea.PullRequest, *gitea.Response, error)); ok {
		return returnFunc(owner, repo, opt)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, gitea.ListPullRequestsOptions) []*gitea.PullRequest); ok {
		r0 = returnFunc(owner, repo, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gitea.PullRequest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, gitea.ListPullRequestsOptions) *gitea.Response); ok {
		r1 = returnFunc(owner, repo, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*gitea.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(string, string, gitea.ListPullRequestsOptions) error); ok {
		r2 = returnFunc(owner, repo, opt)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockClient_ListRepoPullRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRepoPullRequests'
type MockClient_ListRepoPullRequests_Call struct {
	*mock.Call
}

// ListRepoPullRequests is a helper method to define mock.On call
//   - owner
//   - repo
//   - opt
func (_e *MockClient_Expecter) ListRepoPullRequests(owner interface{}, repo interface{}, opt interface{}) *MockClient_ListRepoPullRequests_Call {
	return &MockClient_ListRepoPullRequests_Call{Call: _e.mock.On("ListRepoPullRequests", owner, repo, opt)}
}

func (_c *MockClient_ListRepoPullRequests_Call) Run(run func(owner string, repo string, opt gitea.ListPullRequestsOptions)) *MockClient_ListRepoPullRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(gitea.ListPullRequestsOptions))
	})
	return _c
}

func (_c *MockClient_ListRepoPullRequests_Call) Return(pullRequests []*gitea.PullRequest, response *gitea.Response, err error) *MockClient_ListRepoPullRequests_Call {
	_c.Call.Return(pullRequests, response, err)
	return _c
}

func (_c *MockClient_ListRepoPullRequests_Call) RunAndReturn(run func(owner string, repo string, opt gitea.ListPullRequestsOptions) ([]*gitea.PullRequest, *gitea.Response, error)) *MockClient_ListRepoPullRequests_Call {
	_c.Call.Return(run)
	return _c
}
