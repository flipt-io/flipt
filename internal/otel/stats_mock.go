// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package otel

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc/stats"
)

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

type MockHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandler) EXPECT() *MockHandler_Expecter {
	return &MockHandler_Expecter{mock: &_m.Mock}
}

// HandleConn provides a mock function for the type MockHandler
func (_mock *MockHandler) HandleConn(context1 context.Context, connStats stats.ConnStats) {
	_mock.Called(context1, connStats)
	return
}

// MockHandler_HandleConn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleConn'
type MockHandler_HandleConn_Call struct {
	*mock.Call
}

// HandleConn is a helper method to define mock.On call
//   - context1
//   - connStats
func (_e *MockHandler_Expecter) HandleConn(context1 interface{}, connStats interface{}) *MockHandler_HandleConn_Call {
	return &MockHandler_HandleConn_Call{Call: _e.mock.On("HandleConn", context1, connStats)}
}

func (_c *MockHandler_HandleConn_Call) Run(run func(context1 context.Context, connStats stats.ConnStats)) *MockHandler_HandleConn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(stats.ConnStats))
	})
	return _c
}

func (_c *MockHandler_HandleConn_Call) Return() *MockHandler_HandleConn_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_HandleConn_Call) RunAndReturn(run func(context1 context.Context, connStats stats.ConnStats)) *MockHandler_HandleConn_Call {
	_c.Run(run)
	return _c
}

// HandleRPC provides a mock function for the type MockHandler
func (_mock *MockHandler) HandleRPC(context1 context.Context, rPCStats stats.RPCStats) {
	_mock.Called(context1, rPCStats)
	return
}

// MockHandler_HandleRPC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleRPC'
type MockHandler_HandleRPC_Call struct {
	*mock.Call
}

// HandleRPC is a helper method to define mock.On call
//   - context1
//   - rPCStats
func (_e *MockHandler_Expecter) HandleRPC(context1 interface{}, rPCStats interface{}) *MockHandler_HandleRPC_Call {
	return &MockHandler_HandleRPC_Call{Call: _e.mock.On("HandleRPC", context1, rPCStats)}
}

func (_c *MockHandler_HandleRPC_Call) Run(run func(context1 context.Context, rPCStats stats.RPCStats)) *MockHandler_HandleRPC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(stats.RPCStats))
	})
	return _c
}

func (_c *MockHandler_HandleRPC_Call) Return() *MockHandler_HandleRPC_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_HandleRPC_Call) RunAndReturn(run func(context1 context.Context, rPCStats stats.RPCStats)) *MockHandler_HandleRPC_Call {
	_c.Run(run)
	return _c
}

// TagConn provides a mock function for the type MockHandler
func (_mock *MockHandler) TagConn(context1 context.Context, connTagInfo *stats.ConnTagInfo) context.Context {
	ret := _mock.Called(context1, connTagInfo)

	if len(ret) == 0 {
		panic("no return value specified for TagConn")
	}

	var r0 context.Context
	if returnFunc, ok := ret.Get(0).(func(context.Context, *stats.ConnTagInfo) context.Context); ok {
		r0 = returnFunc(context1, connTagInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	return r0
}

// MockHandler_TagConn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagConn'
type MockHandler_TagConn_Call struct {
	*mock.Call
}

// TagConn is a helper method to define mock.On call
//   - context1
//   - connTagInfo
func (_e *MockHandler_Expecter) TagConn(context1 interface{}, connTagInfo interface{}) *MockHandler_TagConn_Call {
	return &MockHandler_TagConn_Call{Call: _e.mock.On("TagConn", context1, connTagInfo)}
}

func (_c *MockHandler_TagConn_Call) Run(run func(context1 context.Context, connTagInfo *stats.ConnTagInfo)) *MockHandler_TagConn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*stats.ConnTagInfo))
	})
	return _c
}

func (_c *MockHandler_TagConn_Call) Return(context11 context.Context) *MockHandler_TagConn_Call {
	_c.Call.Return(context11)
	return _c
}

func (_c *MockHandler_TagConn_Call) RunAndReturn(run func(context1 context.Context, connTagInfo *stats.ConnTagInfo) context.Context) *MockHandler_TagConn_Call {
	_c.Call.Return(run)
	return _c
}

// TagRPC provides a mock function for the type MockHandler
func (_mock *MockHandler) TagRPC(context1 context.Context, rPCTagInfo *stats.RPCTagInfo) context.Context {
	ret := _mock.Called(context1, rPCTagInfo)

	if len(ret) == 0 {
		panic("no return value specified for TagRPC")
	}

	var r0 context.Context
	if returnFunc, ok := ret.Get(0).(func(context.Context, *stats.RPCTagInfo) context.Context); ok {
		r0 = returnFunc(context1, rPCTagInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	return r0
}

// MockHandler_TagRPC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagRPC'
type MockHandler_TagRPC_Call struct {
	*mock.Call
}

// TagRPC is a helper method to define mock.On call
//   - context1
//   - rPCTagInfo
func (_e *MockHandler_Expecter) TagRPC(context1 interface{}, rPCTagInfo interface{}) *MockHandler_TagRPC_Call {
	return &MockHandler_TagRPC_Call{Call: _e.mock.On("TagRPC", context1, rPCTagInfo)}
}

func (_c *MockHandler_TagRPC_Call) Run(run func(context1 context.Context, rPCTagInfo *stats.RPCTagInfo)) *MockHandler_TagRPC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*stats.RPCTagInfo))
	})
	return _c
}

func (_c *MockHandler_TagRPC_Call) Return(context11 context.Context) *MockHandler_TagRPC_Call {
	_c.Call.Return(context11)
	return _c
}

func (_c *MockHandler_TagRPC_Call) RunAndReturn(run func(context1 context.Context, rPCTagInfo *stats.RPCTagInfo) context.Context) *MockHandler_TagRPC_Call {
	_c.Call.Return(run)
	return _c
}
