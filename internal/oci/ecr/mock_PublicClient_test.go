// Code generated by mockery v2.42.1. DO NOT EDIT.

package ecr

import (
	context "context"

	ecrpublic "github.com/aws/aws-sdk-go-v2/service/ecrpublic"
	mock "github.com/stretchr/testify/mock"
)

// MockPublicClient is an autogenerated mock type for the PublicClient type
type MockPublicClient struct {
	mock.Mock
}

// GetAuthorizationToken provides a mock function with given fields: ctx, params, optFns
func (_m *MockPublicClient) GetAuthorizationToken(ctx context.Context, params *ecrpublic.GetAuthorizationTokenInput, optFns ...func(*ecrpublic.Options)) (*ecrpublic.GetAuthorizationTokenOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthorizationToken")
	}

	var r0 *ecrpublic.GetAuthorizationTokenOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecrpublic.GetAuthorizationTokenInput, ...func(*ecrpublic.Options)) (*ecrpublic.GetAuthorizationTokenOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecrpublic.GetAuthorizationTokenInput, ...func(*ecrpublic.Options)) *ecrpublic.GetAuthorizationTokenOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecrpublic.GetAuthorizationTokenOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecrpublic.GetAuthorizationTokenInput, ...func(*ecrpublic.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockPublicClient creates a new instance of MockPublicClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPublicClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPublicClient {
	mock := &MockPublicClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
