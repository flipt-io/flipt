// Code generated by vfsgen; DO NOT EDIT.

package swagger

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Time{},
			uncompressedSize: 447,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x91\x41\x4f\x3b\x21\x10\xc5\xef\xff\x4f\x31\x7f\x2e\xbd\xb8\x8b\xde\x4c\x85\x4d\x8c\xd5\xc4\x93\x8d\xf1\xe2\x91\xc2\xb8\x4c\xc3\xc2\x06\xa6\x6d\x56\xe3\x77\x37\x5b\xda\xa6\x27\x98\x37\xe1\x37\xef\x31\xea\xff\xea\xed\xe9\xe3\x73\xfd\x0c\x9e\x87\xd0\xfd\x53\xf5\x00\x50\x1e\x8d\x9b\x2f\x00\x8a\x89\x03\x76\x2f\x81\x46\x86\xc7\xf5\xab\x92\x55\xa8\xcd\x01\xd9\x80\xf5\x26\x17\x64\x2d\x76\xfc\xd5\xdc\x0b\x79\xdd\x8b\x66\x40\x2d\xf6\x84\x87\x31\x65\x16\x60\x53\x64\x8c\xac\xc5\x81\x1c\x7b\xed\x70\x4f\x16\x9b\x63\x71\x03\x14\x89\xc9\x84\xa6\x58\x13\x50\xdf\x89\x13\xa8\xf0\x74\x1e\x08\xb0\x49\x6e\x82\x9f\x53\x01\x30\x98\xdc\x53\x5c\xc2\xed\xc3\x45\x1a\x8d\x73\x14\xfb\x2b\xed\xb7\x72\xe4\x05\xa4\xe4\x39\xa0\x9a\x79\xa7\x39\x19\x5d\xb2\x50\x46\xb4\xcd\x2e\x07\xbd\x28\x07\xd3\xf7\x98\xdb\x6d\x49\x71\x01\xc1\x7c\x4f\x4d\xc6\xe8\x30\x53\xec\xc1\x93\xc3\xc6\xa7\xc2\x73\xc2\x4e\xc9\xe3\xe3\xb3\x61\x9b\xe7\xdf\x2a\xd9\x6a\xe1\x99\xc7\xb2\x94\x32\xe3\x86\x42\x98\xda\x9e\xd8\xef\x36\x2d\x25\xf9\x8e\xab\x64\x65\xc6\x80\xa6\x60\x91\xc1\x30\x16\xae\x9c\x76\xa0\xd8\x6e\x8b\xe8\x66\xd3\x47\x58\x75\x5d\xcd\x2a\x59\xf7\xf4\x17\x00\x00\xff\xff\xf2\x88\x1a\x30\xbf\x01\x00\x00"),
		},
		"/swagger.json": &vfsgen۰CompressedFileInfo{
			name:             "swagger.json",
			modTime:          time.Time{},
			uncompressedSize: 29143,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5b\x6f\xdb\x36\x14\x7e\xf7\xaf\x20\xb4\x3d\x66\x75\xd7\xbd\xf5\x2d\x4d\xd3\x22\x58\x6b\x07\x4e\xda\x61\x18\x02\x83\x96\x68\x87\xad\x24\x2a\x24\x95\x2d\x08\xfc\xdf\x07\xea\x7e\xbf\xdb\x26\x2d\x15\x28\xec\x58\x24\x75\x2e\xdf\x39\xe7\x13\x49\xf1\x75\x06\x80\xc6\xfe\x85\xbb\x1d\xa2\xda\x7b\xa0\xbd\x7b\xf3\x56\xbb\x10\xbf\x61\x7b\x4b\xb4\xf7\x40\x5c\x07\x40\xe3\x98\x9b\x48\x5c\xff\x64\x62\x87\x83\xd5\xf5\xdd\x3d\xb8\xbc\xbd\xf1\x9a\x02\xa0\x3d\x23\xca\x30\xb1\x45\x03\x13\x72\xc4\xb8\x36\x03\x60\xef\x8d\xc3\xf4\x47\x64\x21\xa6\xbd\x07\xff\xf8\x6d\x1f\x39\x77\xc2\x7e\xe2\x3b\x13\x6d\x1f\xbc\xb6\x3a\xb1\x99\x9b\x6a\x0c\x1d\xc7\xc4\x3a\xe4\x98\xd8\xf3\x1f\x8c\xd8\x71\x5b\x87\x12\xc3\xd5\x1b\xb6\x85\xfc\x91\xc5\xca\xcc\xa1\x83\xe7\xcf\xbf\xcf\xd1\x33\x34\x5d\xc8\x51\x74\x45\x34\x25\x8c\x27\xfe\x06\x40\x23\x0e\xa2\xde\xa0\x37\x86\xd0\xef\x3a\xec\x74\x11\x37\xa1\x88\x39\xc4\x66\x88\xa5\x7a\x02\xa0\xbd\x7b\xfb\x36\xf3\x13\x00\x9a\x81\x98\x4e\xb1\xc3\x03\x83\x5d\x02\xe6\xea\x3a\x62\x6c\xeb\x9a\x20\x1c\xe9\x4d\x62\x78\xaf\x93\x67\x46\x98\x1b\x0c\x00\xed\x57\x8a\xb6\x62\x9c\x5f\xe6\x06\xda\x62\x1b\x8b\x71\xd9\x7c\x2b\xfc\x14\xc8\x8a\x89\xbd\x0a\xc6\xd5\x52\xbd\xf7\xb3\xa2\xef\xfb\x84\x66\x0e\xa4\xd0\x42\x1c\xd1\xd8\xce\xfe\xbf\x8c\x4e\x36\xb4\x3c\x78\x6c\x88\xf1\x92\x15\x1d\xdb\x65\x57\x28\x7a\x72\x31\x45\xc2\xae\x9c\xba\x68\x68\x95\x9f\xdc\x00\x89\x75\x1a\x3f\x24\x34\xe6\x70\x97\xd5\x55\x8b\x07\x8d\x47\x7b\x98\x25\x47\x09\x6c\x16\x41\x6b\x6b\xfa\xc3\x44\xb8\xda\xa1\x6a\x58\x7d\xc1\x8c\x7f\xf2\x3a\x29\x80\x2b\x21\xa8\x10\xf8\xd0\x68\x32\xb1\x85\x79\x31\x9c\x9e\x5c\x44\xab\xf0\xb4\x85\x26\xcb\x02\x8a\xbf\x38\xde\xb0\xd8\xe6\x48\xa4\xbb\xcc\xe5\x2d\xa1\x16\xe4\x41\x83\x3f\xde\x25\x95\xdb\x5f\xd4\x0b\x4b\xb6\x5b\x86\xe4\x90\xb6\x31\xb0\x7d\xc4\xe5\x31\x7d\xd1\x38\x1d\x5e\x51\x04\x39\x12\xe3\xa8\x02\xdc\xb3\x4f\x81\xb1\x4b\x06\x4c\x81\x65\x48\x29\xcf\x7e\xf3\x57\xf1\xb1\xfe\x89\x5e\xf6\x73\xea\x9a\xa8\x75\x3a\x5c\x79\x9d\x14\x40\x95\x10\xf4\x18\xe9\x30\xb4\x67\x31\xba\x04\xc9\x69\x87\xae\x30\xc3\x30\x4e\xb1\xbd\x6b\x9b\xef\xa6\xe4\x7c\xe0\xe4\xec\xe3\xbf\x7f\x72\x16\xe3\xa8\x12\x46\xe3\x0a\x21\x49\x4a\x85\x30\xfc\x80\xa5\xa2\x0c\xb7\x2d\x4a\xc5\x9c\x50\xc3\x7b\x1e\x8d\x9f\xcb\xdc\x6a\xa8\x2f\x45\x07\xb9\x2a\x86\x43\x85\x8c\x1c\xfb\x77\xdf\x4f\xc8\x3e\x26\xb2\x63\x3c\x48\x86\xec\x57\x6c\xec\xdb\x30\xa1\xcf\x88\x4f\x09\x5c\x56\x98\x63\xe3\x08\x72\x0c\x47\x18\x0c\x64\xa2\xd4\x74\x57\x1e\x6e\x1f\xbd\x26\x52\x21\x6e\xcc\x79\x54\x31\x80\xd5\x55\xe9\x6f\x8e\x31\x11\x52\x30\x72\xb8\xa9\x40\x1f\x62\xa0\xca\x46\x1f\xc4\xc7\x1a\x1b\xfb\xb9\x81\x85\x6d\x37\xae\x27\x75\xab\x25\x0c\x9f\xf5\x7f\x4c\xf4\x57\x21\x1a\x53\xf2\x8e\x2a\x2a\x03\x97\xcb\x21\xcc\xc9\x43\x33\x8f\xde\x01\x43\xf4\x63\x2a\xa8\x0e\x12\xaa\xb9\x27\x80\xc6\xac\x4c\xca\x88\x1d\x33\x3b\x93\x2a\x30\x65\x91\xe3\x19\x52\x0c\x6d\x5e\x6a\x97\x3e\xd3\xad\x7d\xc8\x6b\x5d\x68\xb7\x24\xb1\x52\x06\xe3\x54\x3e\x0b\xa4\x99\xa2\xb4\x40\x8e\x93\x97\xf1\x7c\x14\x49\x57\xc6\x83\x4c\xd6\x85\x5c\x7f\xf7\xbb\xaa\x90\x18\x42\x51\x47\x95\x13\x4e\x0e\xff\x14\x4c\x06\x44\xfe\xf7\x10\xb3\x7d\x41\xdf\x9d\xa6\xca\x86\xfd\x31\x33\x54\xb9\xe6\x0f\x2b\xc0\xd9\x92\x7d\xc9\x86\xb1\x29\xbf\xa6\xa5\x99\x68\x4e\x8a\xe6\x48\x93\xe7\x45\x8a\x6f\xb9\xfa\x38\xed\xed\x8b\xe1\x74\x9c\xf8\x6a\x0c\x82\xda\xed\x9b\x8d\x6b\xb6\x54\x4e\x3e\x6e\xc1\x56\xcd\xa7\xcd\x0a\xa4\x54\x0e\x1d\x45\xd4\xaa\x53\x8d\x4e\xb9\x35\x98\xa1\x9d\x85\x32\xcf\xd4\x4d\x36\x03\xdf\x85\xfd\x14\xc0\x74\x20\xeb\xf4\x86\x44\x46\x58\x15\x37\xe1\x46\xb8\xab\xca\xc8\xcd\xe6\x84\x82\xa1\x14\x42\xf0\x48\x5e\x95\x08\xb4\x1d\x30\x25\x56\xa0\xa6\x32\x2b\x76\x22\xe8\x13\xae\xc2\x76\x92\x52\xba\x26\x39\xa4\x31\x53\x97\xcd\xdb\xa3\x26\xeb\x8d\xaa\x43\x23\xbe\x2e\x9b\x5b\xc7\x12\xc4\xea\xb0\x76\x99\xaa\x54\xf0\xcd\x5f\x31\xd0\x89\xcd\x38\x85\xb8\xdb\x4a\xd9\x55\xd4\x5b\x05\xec\x27\xa4\x3d\x30\xfc\x13\x26\x9e\xc2\x20\x41\xd6\x62\x0f\x0c\x18\x09\x57\x09\x08\x0f\x16\x0c\xdd\x57\xd0\x24\x8c\x89\xe3\x96\x79\xe9\xc0\x2f\xd7\x3a\x5a\x35\x5c\x5b\x32\x0f\x09\xc1\x36\x25\xe0\x22\x81\xa6\x35\xb5\x14\x1f\x3a\x59\x21\x88\x8e\x36\x4a\x08\x16\x69\xa0\x05\x28\xb5\x1c\x48\x31\x23\xf6\xbd\x6f\xea\xa8\x06\x64\x4c\x1f\xc5\x2a\xb2\x5d\x2b\x25\x8c\xf6\x6d\xf1\xe7\x62\xf9\xd7\x62\x7d\xb5\xfc\x7a\x7b\xb9\xba\xb9\x5b\x2e\xd6\xf7\x7f\xdf\x5e\x27\x83\xf4\xee\x7e\x75\xb3\xf8\x5c\xd5\x62\xf1\xed\xeb\x87\xeb\x55\x55\x8b\x0f\xcb\xe5\x97\xeb\xcb\xfc\x6d\x66\x19\x83\x09\x6d\xa1\x6b\x7a\xf3\x69\x65\xa2\xa5\x0a\x65\x36\x5c\x0b\x8c\x40\x36\x3f\x90\x1e\xa7\x9d\x4c\x91\x89\x65\xc4\x46\x36\x0b\x95\x21\x38\x19\xf0\xc9\x00\xee\xd0\x9d\xa7\x3d\x07\x6a\x13\x53\xca\xe5\xc5\x29\xc8\xd7\xaf\x93\x38\x7e\xee\x26\xb4\x4b\xdf\x67\x68\xba\x39\x5d\x9a\x74\xd4\x3d\xca\x65\xac\x21\xaf\xe9\x9d\x0c\xeb\xc4\xc4\xab\x88\xd3\xdf\x38\xb6\x4a\xec\xe1\x7a\x81\x3c\xec\xf0\x85\xa4\xad\x92\x3f\xf6\x00\xe6\x04\xb1\xb0\x4d\x3b\x88\xd5\x39\xa9\x68\x5b\x68\x0f\x37\x45\x7b\x63\x3a\x28\x16\xee\x1e\xee\x64\x93\x68\x27\x7c\x97\x1b\x13\xd3\x24\x6e\x69\x64\xd8\xae\xb5\xc9\xac\x79\x24\x22\x63\x6b\x12\xc8\x5b\x18\x3c\xb9\x24\xd8\xc3\xd0\x1d\x6d\x1c\x30\x8b\xd6\xfd\xd2\xb4\xb3\x75\x77\x64\xc3\x8d\x89\x4a\x9d\xb3\x21\xc4\x44\xd0\x2e\x33\x71\x78\xb9\xb9\x91\x93\xaf\x13\x9e\x08\xcd\x3d\x13\x16\x85\xf6\xcf\xb2\x7e\x45\xab\x70\xe5\x6b\x70\xb5\xc6\xca\x4c\x77\x9d\x37\x28\xeb\x8c\x91\xd9\x3f\x76\x22\xf0\x28\x6d\xc8\xd4\xfb\x2f\x47\xe7\xa2\xe7\x51\x45\xce\x95\x19\xe6\x0f\x0d\xed\x01\x10\xea\x0f\xd1\xd1\x5f\x7d\xe2\x13\xd9\x1c\xf3\x97\x8e\x37\xd6\x89\xcd\xd1\x7f\xa5\xe6\xce\x68\xef\x5d\x83\x86\xe1\xd1\x53\x68\xde\x16\xdb\xa2\xf2\xe6\xa9\x79\x9a\x66\xbe\x09\xce\xb0\x3d\x99\x73\x7a\x19\x38\xbc\xf5\x69\x0d\x9d\x10\xc8\x82\x5c\x7f\x1c\x8c\xfc\x0c\x84\xe1\xbe\x4f\x54\xd8\x42\x8c\x43\xcb\x39\x48\x56\xea\xfc\x1c\x1d\xfa\xde\x70\xfd\xf9\xd7\xb5\x85\x4d\x13\xe7\xe6\x56\x9b\x65\x65\x83\xb8\x1b\xb3\x59\x62\xf3\x76\x57\x9e\x37\x75\x3a\x20\x9f\x57\xbb\xdc\xe5\x29\x44\x29\xde\x20\xa5\x30\x3d\x71\xab\x61\x8e\xac\x82\x1c\xd3\xee\x3d\x97\x46\x09\x3e\x3a\x4c\xba\x27\xab\x3d\xac\x76\xd9\x7d\xca\x8d\x54\xcb\x1f\x42\x77\xda\x49\x8c\x01\x4c\xd4\xb3\x9a\x7b\x47\x2a\x1d\x9d\x7d\x9f\xb0\x20\x95\x9d\xd2\xd3\xd1\xfc\x1d\x5e\xf0\x2f\x2e\xfe\x03\x3e\xc9\xab\x9d\x26\xab\xb1\xda\x37\x31\x65\x0f\xbe\x1e\xde\xed\xd9\x43\xca\x1a\x85\x61\xb8\x85\x6b\x34\xd4\x40\x41\x60\xa6\x9f\xcd\x0a\x76\x58\x81\xc1\xb1\x54\xbc\xb8\xde\x06\x51\x7d\xe3\xa5\xe0\xf5\x90\xe1\xd5\x2c\xd8\xc0\xd8\x48\xc7\xb2\x75\xe7\x69\x65\x53\xf9\x65\xa7\xf2\xd3\x48\x94\x22\x2b\xe7\x31\xcd\x58\xe7\xa6\x69\xb1\x2a\xdf\x75\xc0\xc5\xaa\xfc\xd9\x97\x4a\xc5\x40\x97\xe4\x58\x67\x8c\x69\x31\xaa\xfc\x30\x03\xa5\xc0\xa1\xb4\xf9\xc3\x19\x96\xc9\xe2\xd3\x73\x42\x19\x5e\x66\xe2\xff\x7e\xf6\x7f\x00\x00\x00\xff\xff\x25\x29\xb5\xb8\xd7\x71\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
		fs["/swagger.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
