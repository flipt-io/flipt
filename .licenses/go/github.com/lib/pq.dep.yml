---
name: github.com/lib/pq
version: v1.9.0
type: go
summary: Package pq is a pure Go Postgres driver for the database/sql package.
homepage: https://godoc.org/github.com/lib/pq
license: mit
licenses:
- sources: LICENSE.md
  text: |
    Copyright (c) 2011-2013, 'pq' Contributors
    Portions Copyright (C) 2011 Blake Mizerany

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
notices:
- sources: notice.go
  text: "// +build go1.10\n\npackage pq\n\nimport (\n\t\"context\"\n\t\"database/sql/driver\"\n)\n\n//
    NoticeHandler returns the notice handler on the given connection, if any. A\n//
    runtime panic occurs if c is not a pq connection. This is rarely used\n// directly,
    use ConnectorNoticeHandler and ConnectorWithNoticeHandler instead.\nfunc NoticeHandler(c
    driver.Conn) func(*Error) {\n\treturn c.(*conn).noticeHandler\n}\n\n// SetNoticeHandler
    sets the given notice handler on the given connection. A\n// runtime panic occurs
    if c is not a pq connection. A nil handler may be used\n// to unset it. This is
    rarely used directly, use ConnectorNoticeHandler and\n// ConnectorWithNoticeHandler
    instead.\n//\n// Note: Notice handlers are executed synchronously by pq meaning
    commands\n// won't continue to be processed until the handler returns.\nfunc SetNoticeHandler(c
    driver.Conn, handler func(*Error)) {\n\tc.(*conn).noticeHandler = handler\n}\n\n//
    NoticeHandlerConnector wraps a regular connector and sets a notice handler\n//
    on it.\ntype NoticeHandlerConnector struct {\n\tdriver.Connector\n\tnoticeHandler
    func(*Error)\n}\n\n// Connect calls the underlying connector's connect method
    and then sets the\n// notice handler.\nfunc (n *NoticeHandlerConnector) Connect(ctx
    context.Context) (driver.Conn, error) {\n\tc, err := n.Connector.Connect(ctx)\n\tif
    err == nil {\n\t\tSetNoticeHandler(c, n.noticeHandler)\n\t}\n\treturn c, err\n}\n\n//
    ConnectorNoticeHandler returns the currently set notice handler, if any. If\n//
    the given connector is not a result of ConnectorWithNoticeHandler, nil is\n//
    returned.\nfunc ConnectorNoticeHandler(c driver.Connector) func(*Error) {\n\tif
    c, ok := c.(*NoticeHandlerConnector); ok {\n\t\treturn c.noticeHandler\n\t}\n\treturn
    nil\n}\n\n// ConnectorWithNoticeHandler creates or sets the given handler for
    the given\n// connector. If the given connector is a result of calling this function\n//
    previously, it is simply set on the given connector and returned. Otherwise,\n//
    this returns a new connector wrapping the given one and setting the notice\n//
    handler. A nil notice handler may be used to unset it.\n//\n// The returned connector
    is intended to be used with database/sql.OpenDB.\n//\n// Note: Notice handlers
    are executed synchronously by pq meaning commands\n// won't continue to be processed
    until the handler returns.\nfunc ConnectorWithNoticeHandler(c driver.Connector,
    handler func(*Error)) *NoticeHandlerConnector {\n\tif c, ok := c.(*NoticeHandlerConnector);
    ok {\n\t\tc.noticeHandler = handler\n\t\treturn c\n\t}\n\treturn &NoticeHandlerConnector{Connector:
    c, noticeHandler: handler}\n}"
