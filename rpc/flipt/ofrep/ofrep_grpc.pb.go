// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: ofrep/ofrep.proto

package ofrep

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	OFREPService_GetProviderConfiguration_FullMethodName = "/flipt.ofrep.OFREPService/GetProviderConfiguration"
)

// OFREPServiceClient is the client API for OFREPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// flipt:sdk:ignore
type OFREPServiceClient interface {
	GetProviderConfiguration(ctx context.Context, in *GetProviderConfigurationRequest, opts ...grpc.CallOption) (*GetProviderConfigurationResponse, error)
}

type oFREPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOFREPServiceClient(cc grpc.ClientConnInterface) OFREPServiceClient {
	return &oFREPServiceClient{cc}
}

func (c *oFREPServiceClient) GetProviderConfiguration(ctx context.Context, in *GetProviderConfigurationRequest, opts ...grpc.CallOption) (*GetProviderConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProviderConfigurationResponse)
	err := c.cc.Invoke(ctx, OFREPService_GetProviderConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OFREPServiceServer is the server API for OFREPService service.
// All implementations must embed UnimplementedOFREPServiceServer
// for forward compatibility
//
// flipt:sdk:ignore
type OFREPServiceServer interface {
	GetProviderConfiguration(context.Context, *GetProviderConfigurationRequest) (*GetProviderConfigurationResponse, error)
	mustEmbedUnimplementedOFREPServiceServer()
}

// UnimplementedOFREPServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOFREPServiceServer struct {
}

func (UnimplementedOFREPServiceServer) GetProviderConfiguration(context.Context, *GetProviderConfigurationRequest) (*GetProviderConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProviderConfiguration not implemented")
}
func (UnimplementedOFREPServiceServer) mustEmbedUnimplementedOFREPServiceServer() {}

// UnsafeOFREPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OFREPServiceServer will
// result in compilation errors.
type UnsafeOFREPServiceServer interface {
	mustEmbedUnimplementedOFREPServiceServer()
}

func RegisterOFREPServiceServer(s grpc.ServiceRegistrar, srv OFREPServiceServer) {
	s.RegisterService(&OFREPService_ServiceDesc, srv)
}

func _OFREPService_GetProviderConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OFREPServiceServer).GetProviderConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OFREPService_GetProviderConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OFREPServiceServer).GetProviderConfiguration(ctx, req.(*GetProviderConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OFREPService_ServiceDesc is the grpc.ServiceDesc for OFREPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OFREPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flipt.ofrep.OFREPService",
	HandlerType: (*OFREPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProviderConfiguration",
			Handler:    _OFREPService_GetProviderConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ofrep/ofrep.proto",
}
