syntax = "proto3";

package flipt.auth;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "go.flipt.io/flipt/rpc/flipt/auth";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Flipt Authentication APIs";
    version: "latest";
    contact: {
      name: "Flipt Team";
      url: "https://github.com/flipt-io/flipt";
      email: "dev@flipt.io"
    };
    license: {
      name: "MIT License";
      url: "https://github.com/flipt-io/flipt/blob/main/rpc/flipt/LICENSE";
    };
  };
  external_docs: {
    url: "https://www.flipt.io/docs";
    description: "Flipt Docs";
  };
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "ClientTokenBearer";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
      }
    }
  };
  security: {
    security_requirement: {
      key: "ClientTokenBearer";
      value: {};
    }
  };
  responses: {
    key: "401";
    value: {
      description: "Request could not be authenticated (authentication required).";
      schema: {
        json_schema: {ref: "#/definitions/rpcStatus"};
      };
    };
  };
};

enum Method {
  METHOD_NONE = 0;
  METHOD_TOKEN = 1;
}

message Authentication {
  string id = 1;
  Method method = 2;
  google.protobuf.Timestamp expires_at = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
  map<string, string> metadata = 6;
}

message DeleteAuthenticationRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["id"]
    }
  };

  string id = 1;
}

service AuthenticationService {
  rpc GetAuthenticationSelf(google.protobuf.Empty) returns (Authentication) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "get_self",
      description: "Get Authentication for current authenticated context",
      tags: "authentication",
    };
  }
  rpc DeleteAuthentication(DeleteAuthenticationRequest) returns (google.protobuf.Empty) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "delete_authentication",
      description: "Delete Authentication by ID",
      tags: "authentication",
    };
  }
}

message CreateTokenRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "name",
        "description"
      ]
    }
  };

  string name = 1;
  string description = 2;
  google.protobuf.Timestamp expires_at = 3;
}

message CreateTokenResponse {
  string client_token = 1;
  Authentication authentication = 2;
}

service AuthenticationMethodTokenService {
  rpc CreateToken(CreateTokenRequest) returns (CreateTokenResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      operation_id: "create",
      description: "Create authentication token",
      tags: "authentication authentication_method token",
    };
  }
}
