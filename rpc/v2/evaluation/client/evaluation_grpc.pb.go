// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: evaluation.proto

package client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EvaluationService_EvaluationSnapshotNamespace_FullMethodName       = "/evaluation.EvaluationService/EvaluationSnapshotNamespace"
	EvaluationService_EvaluationSnapshotNamespaceStream_FullMethodName = "/evaluation.EvaluationService/EvaluationSnapshotNamespaceStream"
)

// EvaluationServiceClient is the client API for EvaluationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EvaluationServiceClient interface {
	EvaluationSnapshotNamespace(ctx context.Context, in *EvaluationNamespaceSnapshotRequest, opts ...grpc.CallOption) (*EvaluationNamespaceSnapshot, error)
	EvaluationSnapshotNamespaceStream(ctx context.Context, in *EvaluationNamespaceSnapshotStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EvaluationNamespaceSnapshot], error)
}

type evaluationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEvaluationServiceClient(cc grpc.ClientConnInterface) EvaluationServiceClient {
	return &evaluationServiceClient{cc}
}

func (c *evaluationServiceClient) EvaluationSnapshotNamespace(ctx context.Context, in *EvaluationNamespaceSnapshotRequest, opts ...grpc.CallOption) (*EvaluationNamespaceSnapshot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EvaluationNamespaceSnapshot)
	err := c.cc.Invoke(ctx, EvaluationService_EvaluationSnapshotNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evaluationServiceClient) EvaluationSnapshotNamespaceStream(ctx context.Context, in *EvaluationNamespaceSnapshotStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EvaluationNamespaceSnapshot], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EvaluationService_ServiceDesc.Streams[0], EvaluationService_EvaluationSnapshotNamespaceStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EvaluationNamespaceSnapshotStreamRequest, EvaluationNamespaceSnapshot]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EvaluationService_EvaluationSnapshotNamespaceStreamClient = grpc.ServerStreamingClient[EvaluationNamespaceSnapshot]

// EvaluationServiceServer is the server API for EvaluationService service.
// All implementations must embed UnimplementedEvaluationServiceServer
// for forward compatibility.
type EvaluationServiceServer interface {
	EvaluationSnapshotNamespace(context.Context, *EvaluationNamespaceSnapshotRequest) (*EvaluationNamespaceSnapshot, error)
	EvaluationSnapshotNamespaceStream(*EvaluationNamespaceSnapshotStreamRequest, grpc.ServerStreamingServer[EvaluationNamespaceSnapshot]) error
	mustEmbedUnimplementedEvaluationServiceServer()
}

// UnimplementedEvaluationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEvaluationServiceServer struct{}

func (UnimplementedEvaluationServiceServer) EvaluationSnapshotNamespace(context.Context, *EvaluationNamespaceSnapshotRequest) (*EvaluationNamespaceSnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluationSnapshotNamespace not implemented")
}
func (UnimplementedEvaluationServiceServer) EvaluationSnapshotNamespaceStream(*EvaluationNamespaceSnapshotStreamRequest, grpc.ServerStreamingServer[EvaluationNamespaceSnapshot]) error {
	return status.Errorf(codes.Unimplemented, "method EvaluationSnapshotNamespaceStream not implemented")
}
func (UnimplementedEvaluationServiceServer) mustEmbedUnimplementedEvaluationServiceServer() {}
func (UnimplementedEvaluationServiceServer) testEmbeddedByValue()                           {}

// UnsafeEvaluationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EvaluationServiceServer will
// result in compilation errors.
type UnsafeEvaluationServiceServer interface {
	mustEmbedUnimplementedEvaluationServiceServer()
}

func RegisterEvaluationServiceServer(s grpc.ServiceRegistrar, srv EvaluationServiceServer) {
	// If the following call pancis, it indicates UnimplementedEvaluationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EvaluationService_ServiceDesc, srv)
}

func _EvaluationService_EvaluationSnapshotNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluationNamespaceSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvaluationServiceServer).EvaluationSnapshotNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EvaluationService_EvaluationSnapshotNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvaluationServiceServer).EvaluationSnapshotNamespace(ctx, req.(*EvaluationNamespaceSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvaluationService_EvaluationSnapshotNamespaceStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EvaluationNamespaceSnapshotStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EvaluationServiceServer).EvaluationSnapshotNamespaceStream(m, &grpc.GenericServerStream[EvaluationNamespaceSnapshotStreamRequest, EvaluationNamespaceSnapshot]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EvaluationService_EvaluationSnapshotNamespaceStreamServer = grpc.ServerStreamingServer[EvaluationNamespaceSnapshot]

// EvaluationService_ServiceDesc is the grpc.ServiceDesc for EvaluationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EvaluationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "evaluation.EvaluationService",
	HandlerType: (*EvaluationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EvaluationSnapshotNamespace",
			Handler:    _EvaluationService_EvaluationSnapshotNamespace_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EvaluationSnapshotNamespaceStream",
			Handler:       _EvaluationService_EvaluationSnapshotNamespaceStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "evaluation.proto",
}
