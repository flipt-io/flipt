swagger: "2.0"
info:
  title: evaluation.proto
  version: version not set
tags:
  - name: ClientEvaluationService
consumes:
  - application/json
produces:
  - application/json
paths:
  /client/v2/environments/{environment_key}/namespaces/{key}/snapshot:
    get:
      operationId: EvaluationSnapshotNamespace
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/evaluationEvaluationNamespaceSnapshot'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: environment_key
          in: path
          required: true
          type: string
        - name: key
          in: path
          required: true
          type: string
        - name: reference
          in: query
          required: false
          type: string
      tags:
        - ClientEvaluationService
  /client/v2/environments/{environment_key}/namespaces/{key}/stream:
    get:
      operationId: EvaluationSnapshotNamespaceStream
      responses:
        "200":
          description: A successful response.(streaming responses)
          schema:
            type: object
            properties:
              result:
                $ref: '#/definitions/evaluationEvaluationNamespaceSnapshot'
              error:
                $ref: '#/definitions/rpcStatus'
            title: Stream result of evaluationEvaluationNamespaceSnapshot
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: environment_key
          in: path
          required: true
          type: string
        - name: key
          in: path
          required: true
          type: string
      tags:
        - ClientEvaluationService
  /internal/v1/evaluation/snapshot/namespace/{key}:
    get:
      operationId: EvaluationSnapshotNamespace2
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/evaluationEvaluationNamespaceSnapshot'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: key
          in: path
          required: true
          type: string
        - name: reference
          in: query
          required: false
          type: string
        - name: environment_key
          in: query
          required: false
          type: string
      tags:
        - ClientEvaluationService
definitions:
  evaluationEvaluationConstraint:
    type: object
    properties:
      type:
        $ref: '#/definitions/evaluationEvaluationConstraintComparisonType'
      property:
        type: string
      operator:
        type: string
      value:
        type: string
  evaluationEvaluationConstraintComparisonType:
    type: string
    enum:
      - UNKNOWN_CONSTRAINT_COMPARISON_TYPE
      - STRING_CONSTRAINT_COMPARISON_TYPE
      - NUMBER_CONSTRAINT_COMPARISON_TYPE
      - BOOLEAN_CONSTRAINT_COMPARISON_TYPE
      - DATETIME_CONSTRAINT_COMPARISON_TYPE
      - ENTITY_ID_CONSTRAINT_COMPARISON_TYPE
    default: UNKNOWN_CONSTRAINT_COMPARISON_TYPE
  evaluationEvaluationDistribution:
    type: object
    properties:
      rule_id:
        type: string
      variant_key:
        type: string
      variant_attachment:
        type: string
      rollout:
        type: number
        format: float
  evaluationEvaluationFlag:
    type: object
    properties:
      key:
        type: string
      name:
        type: string
      description:
        type: string
      enabled:
        type: boolean
      type:
        $ref: '#/definitions/evaluationEvaluationFlagType'
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
      rules:
        type: array
        items:
          type: object
          $ref: '#/definitions/evaluationEvaluationRule'
      rollouts:
        type: array
        items:
          type: object
          $ref: '#/definitions/evaluationEvaluationRollout'
      default_variant:
        $ref: '#/definitions/evaluationEvaluationVariant'
  evaluationEvaluationFlagType:
    type: string
    enum:
      - VARIANT_FLAG_TYPE
      - BOOLEAN_FLAG_TYPE
    default: VARIANT_FLAG_TYPE
  evaluationEvaluationNamespace:
    type: object
    properties:
      key:
        type: string
  evaluationEvaluationNamespaceSnapshot:
    type: object
    properties:
      namespace:
        $ref: '#/definitions/evaluationEvaluationNamespace'
      flags:
        type: array
        items:
          type: object
          $ref: '#/definitions/evaluationEvaluationFlag'
      digest:
        type: string
  evaluationEvaluationRollout:
    type: object
    properties:
      type:
        $ref: '#/definitions/evaluationEvaluationRolloutType'
      rank:
        type: integer
        format: int32
      segment:
        $ref: '#/definitions/evaluationEvaluationRolloutSegment'
      threshold:
        $ref: '#/definitions/evaluationEvaluationRolloutThreshold'
  evaluationEvaluationRolloutSegment:
    type: object
    properties:
      value:
        type: boolean
      segment_operator:
        $ref: '#/definitions/evaluationEvaluationSegmentOperator'
      segments:
        type: array
        items:
          type: object
          $ref: '#/definitions/evaluationEvaluationSegment'
  evaluationEvaluationRolloutThreshold:
    type: object
    properties:
      percentage:
        type: number
        format: float
      value:
        type: boolean
  evaluationEvaluationRolloutType:
    type: string
    enum:
      - UNKNOWN_ROLLOUT_TYPE
      - SEGMENT_ROLLOUT_TYPE
      - THRESHOLD_ROLLOUT_TYPE
    default: UNKNOWN_ROLLOUT_TYPE
  evaluationEvaluationRule:
    type: object
    properties:
      id:
        type: string
      segments:
        type: array
        items:
          type: object
          $ref: '#/definitions/evaluationEvaluationSegment'
      rank:
        type: integer
        format: int32
      segment_operator:
        $ref: '#/definitions/evaluationEvaluationSegmentOperator'
      distributions:
        type: array
        items:
          type: object
          $ref: '#/definitions/evaluationEvaluationDistribution'
  evaluationEvaluationSegment:
    type: object
    properties:
      key:
        type: string
      name:
        type: string
      description:
        type: string
      match_type:
        $ref: '#/definitions/evaluationEvaluationSegmentMatchType'
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
      constraints:
        type: array
        items:
          type: object
          $ref: '#/definitions/evaluationEvaluationConstraint'
  evaluationEvaluationSegmentMatchType:
    type: string
    enum:
      - ALL_SEGMENT_MATCH_TYPE
      - ANY_SEGMENT_MATCH_TYPE
    default: ALL_SEGMENT_MATCH_TYPE
  evaluationEvaluationSegmentOperator:
    type: string
    enum:
      - OR_SEGMENT_OPERATOR
      - AND_SEGMENT_OPERATOR
    default: OR_SEGMENT_OPERATOR
  evaluationEvaluationVariant:
    type: object
    properties:
      id:
        type: string
      key:
        type: string
      attachment:
        type: string
  googleprotobufAny:
    type: object
    properties:
      '@type':
        type: string
        description: |-
          A URL/resource name that uniquely identifies the type of the serialized
          protocol buffer message. This string must contain at least
          one "/" character. The last segment of the URL's path must represent
          the fully qualified name of the type (as in
          `path/google.protobuf.Duration`). The name should be in a canonical form
          (e.g., leading "." is not accepted).

          In practice, teams usually precompile into the binary all types that they
          expect it to use in the context of Any. However, for URLs which use the
          scheme `http`, `https`, or no scheme, one can optionally set up a type
          server that maps type URLs to message definitions as follows:

          * If no scheme is provided, `https` is assumed.
          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official
          protobuf release, and it is not used for type URLs beginning with
          type.googleapis.com. As of May 2023, there are no widely used type server
          implementations and no plans to implement one.

          Schemes other than `http`, `https` (or the empty scheme) might be
          used with implementation specific semantics.
    additionalProperties: {}
    description: |-
      `Any` contains an arbitrary serialized protocol buffer message along with a
      URL that describes the type of the serialized message.

      Protobuf library provides support to pack/unpack Any values in the form
      of utility functions or additional generated methods of the Any type.

      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }
          // or ...
          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
            foo = any.unpack(Foo.getDefaultInstance());
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := anypb.New(foo)
           if err != nil {
             ...
           }
           ...
           foo := &pb.Foo{}
           if err := any.UnmarshalTo(foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use
      'type.googleapis.com/full.type.name' as the type URL and the unpack
      methods only use the fully qualified type name after the last '/'
      in the type URL, for example "foo.bar.com/x/y.z" will yield type
      name "y.z".

      JSON
      ====
      The JSON representation of an `Any` value uses the regular
      representation of the deserialized, embedded message, with an
      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON
      representation, that representation will be embedded adding a field
      `value` which holds the custom JSON in addition to the `@type`
      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/googleprotobufAny'
