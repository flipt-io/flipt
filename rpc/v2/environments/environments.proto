syntax = "proto3";

package environments;

import "gnostic/openapi/v3/annotations.proto";
import "google/api/annotations.proto";
import "google/api/visibility.proto";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";

option go_package = "go.flipt.io/flipt/rpc/v2/environments";

service EnvironmentsService {
  // environments
  rpc ListEnvironments(ListEnvironmentsRequest) returns (ListEnvironmentsResponse) {
    option (google.api.http) = {get: "/api/v2/environments"};
    option (gnostic.openapi.v3.operation) = {operation_id: "listEnvironments"};
  }

  rpc BranchEnvironment(BranchEnvironmentRequest) returns (Environment) {
    option (google.api.method_visibility) = {restriction: "flipt:sdk:ignore"};
    option (google.api.http) = {
      post: "/api/v2/environments/{environment_key}/branches"
      body: "*"
    };
    option (gnostic.openapi.v3.operation) = {operation_id: "branchEnvironment"};
  }

  rpc DeleteBranchEnvironment(DeleteBranchEnvironmentRequest) returns (google.protobuf.Empty) {
    option (google.api.method_visibility) = {restriction: "flipt:sdk:ignore"};
    option (google.api.http) = {delete: "/api/v2/environments/{environment_key}/branches/{key}"};
    option (gnostic.openapi.v3.operation) = {operation_id: "deleteBranchEnvironment"};
  }

  rpc ListEnvironmentBranches(ListEnvironmentBranchesRequest) returns (ListEnvironmentBranchesResponse) {
    option (google.api.method_visibility) = {restriction: "flipt:sdk:ignore"};
    option (google.api.http) = {get: "/api/v2/environments/{environment_key}/branches"};
    option (gnostic.openapi.v3.operation) = {operation_id: "listEnvironmentBranches"};
  }

  rpc ListBranchedEnvironmentChanges(ListBranchedEnvironmentChangesRequest) returns (ListBranchedEnvironmentChangesResponse) {
    option (google.api.method_visibility) = {restriction: "flipt:sdk:ignore"};
    option (google.api.http) = {get: "/api/v2/environments/{environment_key}/branches/{key}/changes"};
    option (gnostic.openapi.v3.operation) = {operation_id: "listBranchedEnvironmentChanges"};
  }

  rpc ProposeEnvironment(ProposeEnvironmentRequest) returns (EnvironmentProposalDetails) {
    option (google.api.method_visibility) = {restriction: "flipt:sdk:ignore"};
    option (google.api.http) = {
      post: "/api/v2/environments/{environment_key}/branches/{key}"
      body: "*"
    };
    option (gnostic.openapi.v3.operation) = {operation_id: "proposeEnvironment"};
  }

  // namespaces
  rpc GetNamespace(GetNamespaceRequest) returns (NamespaceResponse) {
    option (google.api.http) = {get: "/api/v2/environments/{environment_key}/namespaces/{key}"};
    option (gnostic.openapi.v3.operation) = {operation_id: "getNamespace"};
  }

  rpc ListNamespaces(ListNamespacesRequest) returns (ListNamespacesResponse) {
    option (google.api.http) = {get: "/api/v2/environments/{environment_key}/namespaces"};
    option (gnostic.openapi.v3.operation) = {operation_id: "listNamespaces"};
  }

  rpc CreateNamespace(UpdateNamespaceRequest) returns (NamespaceResponse) {
    option (google.api.http) = {
      post: "/api/v2/environments/{environment_key}/namespaces"
      body: "*"
    };
    option (gnostic.openapi.v3.operation) = {operation_id: "createNamespace"};
  }

  rpc UpdateNamespace(UpdateNamespaceRequest) returns (NamespaceResponse) {
    option (google.api.http) = {
      put: "/api/v2/environments/{environment_key}/namespaces"
      body: "*"
    };
    option (gnostic.openapi.v3.operation) = {operation_id: "updateNamespace"};
  }

  rpc DeleteNamespace(DeleteNamespaceRequest) returns (DeleteNamespaceResponse) {
    option (google.api.http) = {delete: "/api/v2/environments/{environment_key}/namespaces/{key}"};
    option (gnostic.openapi.v3.operation) = {operation_id: "deleteNamespace"};
  }

  // resources
  rpc GetResource(GetResourceRequest) returns (ResourceResponse) {
    option (google.api.http) = {get: "/api/v2/environments/{environment_key}/namespaces/{namespace_key}/resources/{type_url=*}/{key}"};
    option (gnostic.openapi.v3.operation) = {operation_id: "getResource"};
  }

  rpc ListResources(ListResourcesRequest) returns (ListResourcesResponse) {
    option (google.api.http) = {get: "/api/v2/environments/{environment_key}/namespaces/{namespace_key}/resources/{type_url=*}"};
    option (gnostic.openapi.v3.operation) = {operation_id: "listResources"};
  }

  rpc CreateResource(UpdateResourceRequest) returns (ResourceResponse) {
    option (google.api.http) = {
      post: "/api/v2/environments/{environment_key}/namespaces/{namespace_key}/resources"
      body: "*"
    };
    option (gnostic.openapi.v3.operation) = {operation_id: "createResource"};
  }

  rpc UpdateResource(UpdateResourceRequest) returns (ResourceResponse) {
    option (google.api.http) = {
      put: "/api/v2/environments/{environment_key}/namespaces/{namespace_key}/resources"
      body: "*"
    };
    option (gnostic.openapi.v3.operation) = {operation_id: "updateResource"};
  }

  rpc DeleteResource(DeleteResourceRequest) returns (DeleteResourceResponse) {
    option (google.api.http) = {delete: "/api/v2/environments/{environment_key}/namespaces/{namespace_key}/resources/{type_url=*}/{key}"};
    option (gnostic.openapi.v3.operation) = {operation_id: "deleteResource"};
  }
}

/* Environments */

message Environment {
  string key = 1;
  string name = 2;
  optional bool default = 3;
  optional EnvironmentConfiguration configuration = 4;
}

message EnvironmentConfiguration {
  string ref = 1;
  optional string directory = 2;
  optional string remote = 3;
  optional string base = 4;
  optional SCM scm = 5;
}

message ListEnvironmentsRequest {}

message ListEnvironmentsResponse {
  repeated Environment environments = 1;
}

message BranchEnvironmentRequest {
  string environment_key = 1;
  string key = 2;
}

message DeleteBranchEnvironmentRequest {
  string environment_key = 1;
  string key = 2;
}

message BranchEnvironment {
  string environment_key = 1;
  string key = 2;
  string ref = 3;
  optional EnvironmentProposalDetails proposal = 4;
}

message ListEnvironmentBranchesRequest {
  string environment_key = 1;
}

message ListEnvironmentBranchesResponse {
  repeated BranchEnvironment branches = 1;
}

message ProposeEnvironmentRequest {
  string environment_key = 1;
  string key = 2;
  optional string title = 3;
  optional string body = 4;
  optional bool draft = 5;
}

enum SCM {
  SCM_UNKNOWN = 0;
  SCM_GITHUB = 1;
  SCM_GITEA = 2;
  SCM_GITLAB = 3;
}

enum ProposalState {
  PROPOSAL_STATE_UNKNOWN = 0;
  PROPOSAL_STATE_OPEN = 1;
  PROPOSAL_STATE_MERGED = 2;
  PROPOSAL_STATE_CLOSED = 3;
}

message EnvironmentProposalDetails {
  string url = 1;
  ProposalState state = 2;
}

message Change {
  string revision = 1;
  string message = 2;
  optional string author_name = 3;
  optional string author_email = 4;
  string timestamp = 5;
  optional string scm_url = 6;
}

message ListBranchedEnvironmentChangesRequest {
  string environment_key = 1;
  string key = 2;
  optional string from = 3;
  optional int32 limit = 4;
}

message ListBranchedEnvironmentChangesResponse {
  repeated Change changes = 1;
}

/* Namespace */

message Namespace {
  string key = 1;
  string name = 2;
  optional string description = 3;
  optional bool protected = 4;
}

message GetNamespaceRequest {
  string environment_key = 1;
  string key = 2;
}

message NamespaceResponse {
  Namespace namespace = 1;
  string revision = 100;
}

message ListNamespacesRequest {
  string environment_key = 1;
}

message ListNamespacesResponse {
  repeated Namespace items = 1;
  string revision = 100;
}

message UpdateNamespaceRequest {
  string environment_key = 1;
  string key = 2;
  string name = 3;
  optional string description = 4;
  optional bool protected = 5;
  string revision = 100;
}

message DeleteNamespaceRequest {
  string environment_key = 1;
  string key = 2;
  string revision = 100;
}

message DeleteNamespaceResponse {
  string revision = 100;
}

/* Resource */

message GetResourceRequest {
  string environment_key = 1;
  string namespace_key = 2;
  string type_url = 3;
  string key = 4;
}

message Resource {
  string namespace_key = 1;
  string key = 2;
  google.protobuf.Any payload = 3;
}

message ResourceResponse {
  Resource resource = 1;
  string revision = 100;
}

message ListResourcesRequest {
  string environment_key = 1;
  string namespace_key = 2;
  string type_url = 3;
}

message ListResourcesResponse {
  repeated Resource resources = 1;
  string revision = 100;
}

message UpdateResourceRequest {
  string environment_key = 1;
  string namespace_key = 2;
  string key = 3;
  google.protobuf.Any payload = 4;
  string revision = 100;
}

message DeleteResourceRequest {
  string environment_key = 1;
  string namespace_key = 2;
  string type_url = 3;
  string key = 4;
  string revision = 100;
}

message DeleteResourceResponse {
  string revision = 100;
}
