// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: environments.proto

package environments

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EnvironmentsService_ListEnvironments_FullMethodName               = "/environments.EnvironmentsService/ListEnvironments"
	EnvironmentsService_BranchEnvironment_FullMethodName              = "/environments.EnvironmentsService/BranchEnvironment"
	EnvironmentsService_ListEnvironmentBranches_FullMethodName        = "/environments.EnvironmentsService/ListEnvironmentBranches"
	EnvironmentsService_ListBranchedEnvironmentChanges_FullMethodName = "/environments.EnvironmentsService/ListBranchedEnvironmentChanges"
	EnvironmentsService_ProposeEnvironment_FullMethodName             = "/environments.EnvironmentsService/ProposeEnvironment"
	EnvironmentsService_GetNamespace_FullMethodName                   = "/environments.EnvironmentsService/GetNamespace"
	EnvironmentsService_ListNamespaces_FullMethodName                 = "/environments.EnvironmentsService/ListNamespaces"
	EnvironmentsService_CreateNamespace_FullMethodName                = "/environments.EnvironmentsService/CreateNamespace"
	EnvironmentsService_UpdateNamespace_FullMethodName                = "/environments.EnvironmentsService/UpdateNamespace"
	EnvironmentsService_DeleteNamespace_FullMethodName                = "/environments.EnvironmentsService/DeleteNamespace"
	EnvironmentsService_GetResource_FullMethodName                    = "/environments.EnvironmentsService/GetResource"
	EnvironmentsService_ListResources_FullMethodName                  = "/environments.EnvironmentsService/ListResources"
	EnvironmentsService_CreateResource_FullMethodName                 = "/environments.EnvironmentsService/CreateResource"
	EnvironmentsService_UpdateResource_FullMethodName                 = "/environments.EnvironmentsService/UpdateResource"
	EnvironmentsService_DeleteResource_FullMethodName                 = "/environments.EnvironmentsService/DeleteResource"
)

// EnvironmentsServiceClient is the client API for EnvironmentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvironmentsServiceClient interface {
	// environments
	ListEnvironments(ctx context.Context, in *ListEnvironmentsRequest, opts ...grpc.CallOption) (*ListEnvironmentsResponse, error)
	BranchEnvironment(ctx context.Context, in *BranchEnvironmentRequest, opts ...grpc.CallOption) (*Environment, error)
	ListEnvironmentBranches(ctx context.Context, in *ListEnvironmentBranchesRequest, opts ...grpc.CallOption) (*ListEnvironmentBranchesResponse, error)
	ListBranchedEnvironmentChanges(ctx context.Context, in *ListBranchedEnvironmentChangesRequest, opts ...grpc.CallOption) (*ListBranchedEnvironmentChangesResponse, error)
	ProposeEnvironment(ctx context.Context, in *ProposeEnvironmentRequest, opts ...grpc.CallOption) (*ProposeEnvironmentResponse, error)
	// namespaces
	GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*NamespaceResponse, error)
	ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error)
	CreateNamespace(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*NamespaceResponse, error)
	UpdateNamespace(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*NamespaceResponse, error)
	DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error)
	// resources
	GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error)
	ListResources(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error)
	CreateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error)
	UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error)
	DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error)
}

type environmentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvironmentsServiceClient(cc grpc.ClientConnInterface) EnvironmentsServiceClient {
	return &environmentsServiceClient{cc}
}

func (c *environmentsServiceClient) ListEnvironments(ctx context.Context, in *ListEnvironmentsRequest, opts ...grpc.CallOption) (*ListEnvironmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEnvironmentsResponse)
	err := c.cc.Invoke(ctx, EnvironmentsService_ListEnvironments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsServiceClient) BranchEnvironment(ctx context.Context, in *BranchEnvironmentRequest, opts ...grpc.CallOption) (*Environment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Environment)
	err := c.cc.Invoke(ctx, EnvironmentsService_BranchEnvironment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsServiceClient) ListEnvironmentBranches(ctx context.Context, in *ListEnvironmentBranchesRequest, opts ...grpc.CallOption) (*ListEnvironmentBranchesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEnvironmentBranchesResponse)
	err := c.cc.Invoke(ctx, EnvironmentsService_ListEnvironmentBranches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsServiceClient) ListBranchedEnvironmentChanges(ctx context.Context, in *ListBranchedEnvironmentChangesRequest, opts ...grpc.CallOption) (*ListBranchedEnvironmentChangesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBranchedEnvironmentChangesResponse)
	err := c.cc.Invoke(ctx, EnvironmentsService_ListBranchedEnvironmentChanges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsServiceClient) ProposeEnvironment(ctx context.Context, in *ProposeEnvironmentRequest, opts ...grpc.CallOption) (*ProposeEnvironmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProposeEnvironmentResponse)
	err := c.cc.Invoke(ctx, EnvironmentsService_ProposeEnvironment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsServiceClient) GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*NamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NamespaceResponse)
	err := c.cc.Invoke(ctx, EnvironmentsService_GetNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsServiceClient) ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNamespacesResponse)
	err := c.cc.Invoke(ctx, EnvironmentsService_ListNamespaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsServiceClient) CreateNamespace(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*NamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NamespaceResponse)
	err := c.cc.Invoke(ctx, EnvironmentsService_CreateNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsServiceClient) UpdateNamespace(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*NamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NamespaceResponse)
	err := c.cc.Invoke(ctx, EnvironmentsService_UpdateNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsServiceClient) DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*DeleteNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteNamespaceResponse)
	err := c.cc.Invoke(ctx, EnvironmentsService_DeleteNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsServiceClient) GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResourceResponse)
	err := c.cc.Invoke(ctx, EnvironmentsService_GetResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsServiceClient) ListResources(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResourcesResponse)
	err := c.cc.Invoke(ctx, EnvironmentsService_ListResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsServiceClient) CreateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResourceResponse)
	err := c.cc.Invoke(ctx, EnvironmentsService_CreateResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsServiceClient) UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResourceResponse)
	err := c.cc.Invoke(ctx, EnvironmentsService_UpdateResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsServiceClient) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResourceResponse)
	err := c.cc.Invoke(ctx, EnvironmentsService_DeleteResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvironmentsServiceServer is the server API for EnvironmentsService service.
// All implementations must embed UnimplementedEnvironmentsServiceServer
// for forward compatibility.
type EnvironmentsServiceServer interface {
	// environments
	ListEnvironments(context.Context, *ListEnvironmentsRequest) (*ListEnvironmentsResponse, error)
	BranchEnvironment(context.Context, *BranchEnvironmentRequest) (*Environment, error)
	ListEnvironmentBranches(context.Context, *ListEnvironmentBranchesRequest) (*ListEnvironmentBranchesResponse, error)
	ListBranchedEnvironmentChanges(context.Context, *ListBranchedEnvironmentChangesRequest) (*ListBranchedEnvironmentChangesResponse, error)
	ProposeEnvironment(context.Context, *ProposeEnvironmentRequest) (*ProposeEnvironmentResponse, error)
	// namespaces
	GetNamespace(context.Context, *GetNamespaceRequest) (*NamespaceResponse, error)
	ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error)
	CreateNamespace(context.Context, *UpdateNamespaceRequest) (*NamespaceResponse, error)
	UpdateNamespace(context.Context, *UpdateNamespaceRequest) (*NamespaceResponse, error)
	DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error)
	// resources
	GetResource(context.Context, *GetResourceRequest) (*ResourceResponse, error)
	ListResources(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error)
	CreateResource(context.Context, *UpdateResourceRequest) (*ResourceResponse, error)
	UpdateResource(context.Context, *UpdateResourceRequest) (*ResourceResponse, error)
	DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error)
	mustEmbedUnimplementedEnvironmentsServiceServer()
}

// UnimplementedEnvironmentsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEnvironmentsServiceServer struct{}

func (UnimplementedEnvironmentsServiceServer) ListEnvironments(context.Context, *ListEnvironmentsRequest) (*ListEnvironmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnvironments not implemented")
}
func (UnimplementedEnvironmentsServiceServer) BranchEnvironment(context.Context, *BranchEnvironmentRequest) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BranchEnvironment not implemented")
}
func (UnimplementedEnvironmentsServiceServer) ListEnvironmentBranches(context.Context, *ListEnvironmentBranchesRequest) (*ListEnvironmentBranchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnvironmentBranches not implemented")
}
func (UnimplementedEnvironmentsServiceServer) ListBranchedEnvironmentChanges(context.Context, *ListBranchedEnvironmentChangesRequest) (*ListBranchedEnvironmentChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBranchedEnvironmentChanges not implemented")
}
func (UnimplementedEnvironmentsServiceServer) ProposeEnvironment(context.Context, *ProposeEnvironmentRequest) (*ProposeEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeEnvironment not implemented")
}
func (UnimplementedEnvironmentsServiceServer) GetNamespace(context.Context, *GetNamespaceRequest) (*NamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespace not implemented")
}
func (UnimplementedEnvironmentsServiceServer) ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaces not implemented")
}
func (UnimplementedEnvironmentsServiceServer) CreateNamespace(context.Context, *UpdateNamespaceRequest) (*NamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (UnimplementedEnvironmentsServiceServer) UpdateNamespace(context.Context, *UpdateNamespaceRequest) (*NamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespace not implemented")
}
func (UnimplementedEnvironmentsServiceServer) DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*DeleteNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (UnimplementedEnvironmentsServiceServer) GetResource(context.Context, *GetResourceRequest) (*ResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (UnimplementedEnvironmentsServiceServer) ListResources(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResources not implemented")
}
func (UnimplementedEnvironmentsServiceServer) CreateResource(context.Context, *UpdateResourceRequest) (*ResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResource not implemented")
}
func (UnimplementedEnvironmentsServiceServer) UpdateResource(context.Context, *UpdateResourceRequest) (*ResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResource not implemented")
}
func (UnimplementedEnvironmentsServiceServer) DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (UnimplementedEnvironmentsServiceServer) mustEmbedUnimplementedEnvironmentsServiceServer() {}
func (UnimplementedEnvironmentsServiceServer) testEmbeddedByValue()                             {}

// UnsafeEnvironmentsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvironmentsServiceServer will
// result in compilation errors.
type UnsafeEnvironmentsServiceServer interface {
	mustEmbedUnimplementedEnvironmentsServiceServer()
}

func RegisterEnvironmentsServiceServer(s grpc.ServiceRegistrar, srv EnvironmentsServiceServer) {
	// If the following call pancis, it indicates UnimplementedEnvironmentsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EnvironmentsService_ServiceDesc, srv)
}

func _EnvironmentsService_ListEnvironments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnvironmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServiceServer).ListEnvironments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentsService_ListEnvironments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServiceServer).ListEnvironments(ctx, req.(*ListEnvironmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentsService_BranchEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BranchEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServiceServer).BranchEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentsService_BranchEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServiceServer).BranchEnvironment(ctx, req.(*BranchEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentsService_ListEnvironmentBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnvironmentBranchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServiceServer).ListEnvironmentBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentsService_ListEnvironmentBranches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServiceServer).ListEnvironmentBranches(ctx, req.(*ListEnvironmentBranchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentsService_ListBranchedEnvironmentChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBranchedEnvironmentChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServiceServer).ListBranchedEnvironmentChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentsService_ListBranchedEnvironmentChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServiceServer).ListBranchedEnvironmentChanges(ctx, req.(*ListBranchedEnvironmentChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentsService_ProposeEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServiceServer).ProposeEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentsService_ProposeEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServiceServer).ProposeEnvironment(ctx, req.(*ProposeEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentsService_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServiceServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentsService_GetNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServiceServer).GetNamespace(ctx, req.(*GetNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentsService_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServiceServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentsService_ListNamespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServiceServer).ListNamespaces(ctx, req.(*ListNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentsService_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServiceServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentsService_CreateNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServiceServer).CreateNamespace(ctx, req.(*UpdateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentsService_UpdateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServiceServer).UpdateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentsService_UpdateNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServiceServer).UpdateNamespace(ctx, req.(*UpdateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentsService_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServiceServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentsService_DeleteNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServiceServer).DeleteNamespace(ctx, req.(*DeleteNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentsService_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServiceServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentsService_GetResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServiceServer).GetResource(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentsService_ListResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServiceServer).ListResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentsService_ListResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServiceServer).ListResources(ctx, req.(*ListResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentsService_CreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServiceServer).CreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentsService_CreateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServiceServer).CreateResource(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentsService_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServiceServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentsService_UpdateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServiceServer).UpdateResource(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnvironmentsService_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServiceServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnvironmentsService_DeleteResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServiceServer).DeleteResource(ctx, req.(*DeleteResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnvironmentsService_ServiceDesc is the grpc.ServiceDesc for EnvironmentsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnvironmentsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "environments.EnvironmentsService",
	HandlerType: (*EnvironmentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEnvironments",
			Handler:    _EnvironmentsService_ListEnvironments_Handler,
		},
		{
			MethodName: "BranchEnvironment",
			Handler:    _EnvironmentsService_BranchEnvironment_Handler,
		},
		{
			MethodName: "ListEnvironmentBranches",
			Handler:    _EnvironmentsService_ListEnvironmentBranches_Handler,
		},
		{
			MethodName: "ListBranchedEnvironmentChanges",
			Handler:    _EnvironmentsService_ListBranchedEnvironmentChanges_Handler,
		},
		{
			MethodName: "ProposeEnvironment",
			Handler:    _EnvironmentsService_ProposeEnvironment_Handler,
		},
		{
			MethodName: "GetNamespace",
			Handler:    _EnvironmentsService_GetNamespace_Handler,
		},
		{
			MethodName: "ListNamespaces",
			Handler:    _EnvironmentsService_ListNamespaces_Handler,
		},
		{
			MethodName: "CreateNamespace",
			Handler:    _EnvironmentsService_CreateNamespace_Handler,
		},
		{
			MethodName: "UpdateNamespace",
			Handler:    _EnvironmentsService_UpdateNamespace_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _EnvironmentsService_DeleteNamespace_Handler,
		},
		{
			MethodName: "GetResource",
			Handler:    _EnvironmentsService_GetResource_Handler,
		},
		{
			MethodName: "ListResources",
			Handler:    _EnvironmentsService_ListResources_Handler,
		},
		{
			MethodName: "CreateResource",
			Handler:    _EnvironmentsService_CreateResource_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _EnvironmentsService_UpdateResource_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _EnvironmentsService_DeleteResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "environments.proto",
}
