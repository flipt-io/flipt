name: Release
on:
  push:
    tags:
      - "v2*"

permissions:
  contents: write
  packages: write

env:
  GO_VERSION: "1.25"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            name: linux
          - os: macos-latest
            name: darwin
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true

      - uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install GCC for arm64
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update && \
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install Quill
        if: matrix.os == 'macos-latest'
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/quill/main/install.sh | sh -s -- -b $GITHUB_WORKSPACE/bin
          echo "${GITHUB_WORKSPACE}/bin" >> $GITHUB_PATH

      - name: Install Mage
        uses: magefile/mage-action@v3
        with:
          # mac build currently doesn't exist for v1.15.0 https://github.com/magefile/mage/issues/481
          version: v1.14.0
          install-only: true

      - name: Prep Build
        run: mage prep
        env:
          FLIPT_FORMBRICKS_ENVIRONMENT_ID: ${{ secrets.FLIPT_FORMBRICKS_ENVIRONMENT_ID }}

      - name: GoReleaser Build
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser-pro
          version: "~> v2.8.0"
          args: build --clean -f .goreleaser.${{ matrix.name }}.yml
        env:
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANALYTICS_WRITE_KEY: ${{ secrets.ANALYTICS_WRITE_KEY }}
          ANALYTICS_WRITE_ENDPOINT: ${{ secrets.ANALYTICS_WRITE_ENDPOINT }}
          QUILL_SIGN_P12: ${{ secrets.QUILL_SIGN_P12 }}
          QUILL_SIGN_PASSWORD: ${{ secrets.QUILL_SIGN_PASSWORD }}
          KEYGEN_VERIFY_KEY: ${{ secrets.KEYGEN_VERIFY_KEY }}
          KEYGEN_ACCOUNT_ID: ${{ secrets.KEYGEN_ACCOUNT_ID }}
          KEYGEN_PRODUCT_ID: ${{ secrets.KEYGEN_PRODUCT_ID }}

      - uses: actions/upload-artifact@v4
        with:
          name: flipt-${{ matrix.name }}
          path: dist/flipt_${{ matrix.name }}_*/flipt

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true

      - uses: docker/setup-qemu-action@v3

      - uses: docker/setup-buildx-action@v3

      - uses: actions/download-artifact@v5
        with:
          name: flipt-linux
          path: tmp/dist

      - uses: actions/download-artifact@v5
        with:
          name: flipt-darwin
          path: tmp/dist

      - name: Install Skopeo
        run: |
          sudo apt-get update
          sudo apt-get -y install skopeo

      - name: Install Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: "${{ github.repository_owner }}"
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate token
        id: generate_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.FLIPT_RELEASE_BOT_APP_ID }}
          private-key: ${{ secrets.FLIPT_RELEASE_BOT_APP_PEM }}
          owner: ${{ github.repository_owner }}

      - name: Install Mage
        uses: magefile/mage-action@v3
        with:
          # mac build currently doesn't exist for v1.15.0 https://github.com/magefile/mage/issues/481
          version: v1.14.0
          install-only: true

      - name: GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser-pro
          version: "~> v2.8.0"
          args: release --clean
        env:
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          DISCORD_WEBHOOK_ID: ${{ secrets.DISCORD_WEBHOOK_ID }}
          DISCORD_WEBHOOK_TOKEN: ${{ secrets.DISCORD_WEBHOOK_TOKEN }}

  update-release-notes:
    name: Update Release Notes
    runs-on: ubuntu-latest
    needs: release
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}

      - name: Extract version from tag
        id: extract_version
        run: |
          TAG="${{ github.ref_name }}"
          VERSION="${TAG#v}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Get previous version
        id: prev_version
        run: |
          # Get the previous v2 tag before the current one
          CURRENT_TAG="${{ github.ref_name }}"
          CURRENT_VERSION="${CURRENT_TAG#v}"

          # Get all v2 tags sorted by semantic version, excluding the current tag
          PREV_TAG=$(git tag --list "v2.*" --sort=-version:refname | grep -v "^${CURRENT_TAG}$" | head -1)

          if [ -z "$PREV_TAG" ]; then
            PREV_TAG="v2.0.0"
          fi
          echo "version=${PREV_TAG#v}" >> $GITHUB_OUTPUT

      - name: Extract changelog section
        id: extract_changelog
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          # Extract the section for this version
          SECTION=$(awk "/^## \[?${VERSION}\]?/{flag=1; next} /^## \[?[0-9]/{flag=0} flag" CHANGELOG.md)
          echo "section<<EOF" >> $GITHUB_OUTPUT
          echo "$SECTION" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate formatted release notes using AI
        id: generate_notes
        uses: actions/ai-inference@v1
        with:
          prompt-file: .github/prompts/format-release-notes.prompt.yml
          input: |
            version: "${{ steps.extract_version.outputs.version }}"
            previous_version: "${{ steps.prev_version.outputs.version }}"
            changelog_section: "${{ steps.extract_changelog.outputs.section }}"
            release_type: "stable"

      - name: Update GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ steps.extract_version.outputs.tag }}"
          CHANGELOG_CONTENT="${{ steps.generate_notes.outputs.response }}"

          # Get the release ID
          RELEASE_ID=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/releases/tags/${TAG} \
            --jq '.id')

          # Get the existing release body
          EXISTING_BODY=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/releases/${RELEASE_ID} \
            --jq '.body')

          # Construct the new release notes
          # If there's an Installation section, insert before it; otherwise append
          if echo "$EXISTING_BODY" | grep -q "## Installation"; then
            # Split at Installation section and insert changelog before it
            BEFORE_INSTALL=$(echo "$EXISTING_BODY" | awk '/## Installation/{exit}1')
            INSTALL_AND_AFTER=$(echo "$EXISTING_BODY" | awk '/## Installation/,0')
            
            # Combine: any existing content before Installation + changelog + Installation and after
            FINAL_NOTES="$(printf '%s\n%s\n\n%s' "$BEFORE_INSTALL" "$CHANGELOG_CONTENT" "$INSTALL_AND_AFTER")"
          else
            # No Installation section found, just append the changelog with default template
            TEMPLATE="## Installation
          ### Docker Images :whale:
          \`\`\`bash
          docker pull docker.flipt.io/flipt/flipt:${TAG}
          \`\`\`
          \`\`\`bash
          docker pull ghcr.io/flipt-io/flipt:${TAG}
          \`\`\`

          ## Thank you!
          We hope you :heart: this release! Feel free to open issues/discussions or reach out to us on Discord if you have any questions or feedback.
          - [Discord](https://flipt.io/discord)
          - [Github Discussions](https://github.com/flipt-io/flipt/discussions)
          - [Github Issues](https://github.com/flipt-io/flipt/issues)
          - [Website](https://flipt.io)"
            
            FINAL_NOTES="$(printf '%s\n\n%s' "$CHANGELOG_CONTENT" "$TEMPLATE")"
          fi

          # Update the release with combined notes
          gh api \
            --method PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/releases/${RELEASE_ID} \
            -f body="${FINAL_NOTES}"
            
          echo "âœ… Updated release notes for ${TAG}"

  update-helm-chart:
    name: Update Helm Chart
    runs-on: ubuntu-latest
    needs: release
    if: success()
    steps:
      - name: Generate token
        id: generate_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.FLIPT_RELEASE_BOT_APP_ID }}
          private-key: ${{ secrets.FLIPT_RELEASE_BOT_APP_PEM }}
          owner: ${{ github.repository_owner }}
          repositories: helm-charts

      - name: Trigger Helm Chart Update
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          echo "Triggering helm-chart update workflow for release ${{ github.ref_name }}"
          gh workflow run update.yml -R flipt-io/helm-charts -f tag="${{ github.ref_name }}"
