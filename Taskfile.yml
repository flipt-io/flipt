# https://taskfile.dev/
version: 3

vars:
  PROJECT: flipt
  SOURCE_FILES: ./...
  BUILD_DIR: .build
  COVERAGE_FILE: coverage.txt

tasks:
  default:
    desc: Build the binary
    deps: [prep]
    cmds:
      - go build -trimpath -tags assets -ldflags "-X main.commit={{.GIT_COMMIT}} -X main.date={{.BUILD_DATE}}" -o {{.OUTPUT}}/{{.PROJECT}} ./cmd/{{.PROJECT}}/.
    vars:
      OUTPUT: '{{default "./bin" .OUTPUT}}'
      GIT_COMMIT:
        sh: set -e && git rev-parse --verify HEAD || ""
      BUILD_DATE:
        sh: date -u +%Y-%m-%dT%H:%M:%SZ

  prep:
    desc: Prepare for release
    cmds:
      - task: clean
      - task: proto
      - task: assets

  pkg:
    desc: Package the binary
    cmds:
      - task: default
        vars: { OUTPUT: "./pkg" }
      - cp ./config/*.yml ./pkg/config/
    vars:
      GIT_COMMIT:
        sh: set -e && git rev-parse --verify HEAD || ""

  assets:
    desc: Build the UI
    deps: [assets:deps]
    dir: "{{.BUILD_DIR}}/ui"
    cmds:
      - npm run build
      - mv dist ../../ui

  assets:clone:
    desc: Clone the UI repo
    cmds:
      - git clone https://github.com/flipt-io/flipt-ui.git {{.BUILD_DIR}}/ui --depth 1
    status:
      - test -d {{.BUILD_DIR}}/ui/.git

  assets:sync:
    desc: Sync the UI repo
    deps: [assets:clone]
    dir: "{{.BUILD_DIR}}/ui"
    cmds:
      - git fetch --all
      - git reset --hard origin/main

  assets:deps:
    deps: [assets:sync]
    desc: Install UI dependencies
    dir: "{{.BUILD_DIR}}/ui"
    cmds:
      - npm ci

  assets:dev:
    desc: Run the UI dev server
    dir: "{{.BUILD_DIR}}/ui"
    cmds:
      - npm run dev

  bootstrap:
    desc: Install necessary development tools
    cmds:
      - ./script/bootstrap

  build:clients:
    desc: Generate Ruby and Go proto clients
    deps: [proto]
    cmds:
      - buf generate --template=buf.public.gen.yaml
    preconditions:
      - sh: "command -v buf"
      - sh: "[ -d ../flipt-grpc-go ]"
        msg: "⚠️  clone https://github.com/flipt-io/flipt-grpc-go to ../flipt-grpc-go first ⚠️"
      - sh: "[ -d ../flipt-grpc-ruby ]"
        msg: "⚠️  clone https://github.com/flipt-io/flipt-grpc-ruby to ../flipt-grpc-ruby first ⚠️"

  proto:
    desc: Generate protobuf files from .protos
    deps: [bootstrap]
    cmds:
      - buf generate

  dev:
    desc: Run the server and UI in development mode
    cmds:
      - script/server

  server:
    desc: Start the server
    cmds:
      - go run ./cmd/flipt/. --config ./config/local.yml --force-migrate

  clean:
    desc: Remove built assets
    cmds:
      - go mod tidy
      - go clean -i {{.SOURCE_FILES}}
      - rm -rf dist/*
      - rm -rf pkg/*
      - rm -rf bin/*
      - rm -rf ui/dist

  cover:
    desc: Run test coverage
    deps: [test]
    cmds:
      - go tool cover -html={{.COVERAGE_FILE}}

  fmt:
    desc: Run goimports
    cmds:
      - goimports -w $(go list -f {{`{{.Dir}}`}} ./... | grep -v /rpc/)

  lint:
    desc: Run the linters
    cmds:
      - golangci-lint run 2>&1
      - buf lint

  test:
    desc: Run all the tests
    cmds:
      - go test {{.TEST_OPTS}} -covermode=atomic -count=1 -coverprofile={{.COVERAGE_FILE}} {{.SOURCE_FILES}} -run={{.TEST_PATTERN}} -timeout=60s
    vars:
      TEST_PATTERN: '{{.TEST_PATTERN | default "."}}'
      TEST_OPTS: '{{.TEST_OPTS | default "-race"}}'
    env:
      FLIPT_TEST_DATABASE_PROTOCOL: '{{.FLIPT_TEST_DATABASE_PROTOCOL | default "sqlite"}}'

  # TODO: clean these up, come up with a different way to do this
  test:db:mysql:
    desc: Run all the tests with MySQL db backend
    cmds:
      - task: test
        vars: { FLIPT_TEST_DATABASE_PROTOCOL: "mysql" }

  test:db:postgres:
    desc: Run all the tests with Postgres db backend
    cmds:
      - task: test
        vars: { FLIPT_TEST_DATABASE_PROTOCOL: "postgres" }

  test:db:cockroachdb:
    desc: Run all the tests with CockroachDB backend
    cmds:
      - task: test
        vars: { FLIPT_TEST_DATABASE_PROTOCOL: "cockroachdb" }
