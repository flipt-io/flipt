# https://taskfile.dev/
version: 3

vars:
  PROJECT: flipt
  SOURCE_FILES: ./...

tasks:
  default:
    desc: Build the binary
    cmds:
      - task: clean
      - task: proto
      - task: assets
      - go build -trimpath -tags assets -ldflags "-X main.commit={{.GIT_COMMIT}}" -o ./bin/{{.PROJECT}} ./cmd/{{.PROJECT}}/.
    vars:
      GIT_COMMIT:
        sh: set -e && git rev-parse --verify HEAD || ""

  assets:
    desc: Build the UI
    deps: [assets:deps]
    cmds:
      - cd ui && yarn build
    sources:
      - ./ui/static/*
      - ./ui/src/**/*
      - ./ui/src/**/**/*
      - ./ui/index.html
      - ./ui/package.json
    method: checksum

  assets:deps:
    desc: Install UI dependencies
    cmds:
      - cd ui && yarn --frozen-lockfile

  bench:
    desc: Run benchmarks
    cmds:
      - go test -bench={{.BENCH_PATTERN}} {{.SOURCE_FILES}} -run=XXX {{.TEST_FLAGS}}
    vars:
      BENCH_PATTERN: .
      TEST_FLAGS: -v

  bootstrap:
    desc: Install necessary development tools
    cmds:
      - ./script/bootstrap

  build:clients:
    desc: Generate Ruby and Go proto clients
    deps: [proto]
    cmds:
      - buf generate --template=buf.public.gen.yaml

  build:release:
    desc: Build a release version and push the release with goreleaser
    cmds:
      - task: clean
      - task: proto
      - task: assets
      - ./script/build release

  build:snapshot:
    desc: Build a snapshot version with goreleaser
    cmds:
      - task: clean
      - task: proto
      - task: assets
      - ./script/build snapshot

  proto:
    desc: Generate protobuf files from .protos
    cmds:
      - buf generate

  clean:
    desc: Remove built assets
    cmds:
      - go mod tidy
      - go clean -i {{.SOURCE_FILES}}
      - rm -rf dist/*

  cover:
    desc: Run test coverage
    deps: [test]
    cmds:
      - go tool cover -html={{.COVERAGE_FILE}}
    vars:
      COVERAGE_FILE: coverage.txt

  dev:
    desc: Start the server and UI in development modes
    cmds:
      - modd
    preconditions:
      - sh: "! [ -x '$(command -v modd)' ]"
        msg: "modd not found. run bootstrap."

  fmt:
    desc: Run goimports
    cmds:
      - goimports -w .

  lint:
    desc: Run the linters
    cmds:
      - golangci-lint run 2>&1
      - buf lint

  test:
    desc: Run all the tests
    cmds:
      - go test {{.TEST_OPTS}} -covermode=atomic -count=1 -coverprofile={{.COVERAGE_FILE}} {{.SOURCE_FILES}} -run={{.TEST_PATTERN}} -timeout=30s {{.TEST_FLAGS}}
    vars:
      COVERAGE_FILE: coverage.txt
      TEST_PATTERN: .
      TEST_FLAGS: -v
      TEST_OPTS:
