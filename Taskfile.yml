# https://taskfile.dev/
version: 3

vars:
  PROJECT: flipt
  SOURCE_FILES: ./...
  UI: ui

tasks:
  default:
    desc: Build the binary
    deps: [prep]
    cmds:
      - go build -trimpath -tags assets -ldflags "-X main.commit={{.GIT_COMMIT}}" -o ./bin/{{.PROJECT}} ./cmd/{{.PROJECT}}/.
    vars:
      GIT_COMMIT:
        sh: set -e && git rev-parse --verify HEAD || ""

  prep:
    desc: Prepare for release
    cmds:
      - task: clean
      - task: proto
      - task: assets

  assets:
    desc: Build the UI
    deps: [assets:deps]
    dir: "{{.UI}}"
    cmds:
      - npm run build
    sources:
      - ./{{.UI}}/static/*
      - ./{{.UI}}/src/**/*
      - ./{{.UI}}/src/**/**/*
      - ./{{.UI}}/index.html
      - ./{{.UI}}/package.json
    method: checksum

  assets:deps:
    desc: Install UI dependencies
    dir: "{{.UI}}"
    cmds:
      - npm ci
    sources:
      - ./{{.UI}}/package-lock.json
    method: checksum

  assets:dev:
    desc: Run the UI dev server
    dir: "{{.UI}}"
    cmds:
      - npm run dev

  bench:
    desc: Run benchmarks
    cmds:
      - go test -bench={{.BENCH_PATTERN}} {{.SOURCE_FILES}} -run=XXX {{.TEST_FLAGS}}
    vars:
      BENCH_PATTERN: .
      TEST_FLAGS: -v

  bootstrap:
    desc: Install necessary development tools
    cmds:
      - ./script/bootstrap
    sources:
      - ./_tools/go.mod
    generates:
      - ./_tools/go.sum
    method: checksum

  build:
    desc: Run Go build
    deps: [bootstrap]
    cmds:
      - go build -trimpath -tags assets -ldflags "-X main.commit={{.GIT_COMMIT}}" -o ./bin/{{.PROJECT}} ./cmd/{{.PROJECT}}/.
    vars:
      GIT_COMMIT:
        sh: set -e && git rev-parse --verify HEAD || ""

  build:clients:
    desc: Generate Ruby and Go proto clients
    deps: [proto]
    cmds:
      - buf generate --template=buf.public.gen.yaml

  proto:
    desc: Generate protobuf files from .protos
    deps: [bootstrap]
    cmds:
      - buf generate

  server:
    desc: Start the server
    cmds:
      - go run ./cmd/flipt/. --config ./config/local.yml --force-migrate

  clean:
    desc: Remove built assets
    cmds:
      - go mod tidy
      - go clean -i {{.SOURCE_FILES}}
      - rm -rf dist/*

  cover:
    desc: Run test coverage
    deps: [test]
    cmds:
      - go tool cover -html={{.COVERAGE_FILE}}
    vars:
      COVERAGE_FILE: coverage.txt

  fmt:
    desc: Run goimports
    cmds:
      - goimports -w $(go list -f {{`{{.Dir}}`}} ./... | grep -v /rpc/)

  lint:
    desc: Run the linters
    cmds:
      - golangci-lint run 2>&1
      - buf lint

  test:
    desc: Run all the tests
    cmds:
      - go test {{.TEST_OPTS}} -covermode=atomic -count=1 -coverprofile={{.COVERAGE_FILE}} {{.SOURCE_FILES}} -run={{.TEST_PATTERN}} -timeout=30s {{.TEST_FLAGS}}
    vars:
      COVERAGE_FILE: coverage.txt
      TEST_PATTERN: .
      TEST_FLAGS: -v
      TEST_OPTS: -race
